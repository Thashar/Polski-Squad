const path = require('path');
const { safeDeleteMessage, updateUserEphemeralReply } = require('../utils/helpers');
const { extractOptimizedStatsFromImage } = require('../services/ocrService');
const { proposeNicknameChange } = require('../services/nicknameService');
const { finishOtherPurposeRecruitment, sendPendingQualification } = require('../services/qualificationService');
const { safeAddRole } = require('../services/roleService');

async function handleMessage(message, sharedState, config, client, MONITORED_CHANNEL_ID) {
    if (message.channel.id !== MONITORED_CHANNEL_ID) {
        return;
    }
    
    if (message.author.bot) return;
    
    const userId = message.author.id;
    const userState = sharedState.userStates.get(userId);
    console.log(`[MESSAGE] Otrzymano wiadomo≈õƒá od ${message.author.username}: "${message.content.substring(0, 50)}..."`);
    
    const isUseful = await analyzeMessage(message, userState, sharedState, config, client);
    if (!isUseful) {
        console.log(`[MESSAGE] Usuwam bezu≈ºytecznƒÖ wiadomo≈õƒá od ${message.author.username}`);
        await safeDeleteMessage(message);
    } else {
        console.log(`[MESSAGE] Wiadomo≈õƒá od ${message.author.username} jest przydatna`);
    }
}

async function analyzeMessage(message, userState, sharedState, config, client) {
    console.log(`[ANALYZE] Analizujƒô wiadomo≈õƒá w stanie: ${userState?.step || 'brak stanu'}`);
    
    if (userState && userState.step === 'waiting_rc') {
        await handleRCInput(message, userState, sharedState, config);
        return true;
    }
    
    if (userState && userState.step === 'waiting_lunar_level') {
        await handleLunarLevelInput(message, userState, sharedState, config);
        return true;
    }
    
    if (userState && userState.step === 'waiting_lunar_points') {
        await handleLunarPointsInput(message, userState, sharedState, config);
        return true;
    }
    
    if (userState && userState.step === 'waiting_image') {
        await handleImageInput(message, userState, sharedState, config, client);
        return true;
    }
    
    console.log(`[ANALYZE] Wiadomo≈õƒá nie pasuje do ≈ºadnego stanu`);
    return false;
}

async function handleRCInput(message, userState, sharedState, config) {
    const rcAmount = parseInt(message.content);
    console.log(`[RC_INPUT] U≈ºytkownik ${message.author.username} poda≈Ç RC: ${message.content}`);
    
    await safeDeleteMessage(message);
    
    if (isNaN(rcAmount) || rcAmount < 0 || rcAmount > 500) {
        console.log(`[RC_INPUT] ‚ùå Nieprawid≈Çowa warto≈õƒá RC: ${rcAmount}`);
        await updateUserEphemeralReply(message.author.id, config.messages.invalidRC, [], sharedState.userEphemeralReplies);
        return;
    }
    
    console.log(`[RC_INPUT] ‚úÖ Prawid≈Çowa warto≈õƒá RC: ${rcAmount}`);
    
    const info = sharedState.userInfo.get(message.author.id);
    if (info) {
        info.rcAmount = rcAmount;
        sharedState.userInfo.set(message.author.id, info);
    }
    
    sharedState.userStates.set(message.author.id, { step: 'waiting_lunar_level', rcAmount });
    await updateUserEphemeralReply(message.author.id, config.messages.lunarLevelQuestion, [], sharedState.userEphemeralReplies);
}

async function handleLunarLevelInput(message, userState, sharedState, config) {
    const lunarLevel = parseInt(message.content);
    console.log(`[LUNAR_LEVEL] U≈ºytkownik ${message.author.username} poda≈Ç poziom Lunar: ${message.content}`);
    
    await safeDeleteMessage(message);
    
    if (isNaN(lunarLevel) || lunarLevel < 1 || lunarLevel > 12) {
        console.log(`[LUNAR_LEVEL] ‚ùå Nieprawid≈Çowy poziom Lunar: ${lunarLevel}`);
        await updateUserEphemeralReply(message.author.id, config.messages.invalidLunarLevel, [], sharedState.userEphemeralReplies);
        return;
    }
    
    console.log(`[LUNAR_LEVEL] ‚úÖ Prawid≈Çowy poziom Lunar: ${lunarLevel}`);
    
    const info = sharedState.userInfo.get(message.author.id);
    if (info) {
        info.lunarLevel = lunarLevel;
        sharedState.userInfo.set(message.author.id, info);
    }
    
    sharedState.userStates.set(message.author.id, {
        step: 'waiting_lunar_points',
        rcAmount: userState.rcAmount,
        lunarLevel
    });
    
    await updateUserEphemeralReply(message.author.id, config.messages.lunarPointsQuestion, [], sharedState.userEphemeralReplies);
}

async function handleLunarPointsInput(message, userState, sharedState, config) {
    const lunarPoints = parseInt(message.content);
    console.log(`[LUNAR_POINTS] U≈ºytkownik ${message.author.username} poda≈Ç punkty Lunar: ${message.content}`);
    
    await safeDeleteMessage(message);
    
    if (isNaN(lunarPoints) || lunarPoints < 0 || lunarPoints > 1500) {
        console.log(`[LUNAR_POINTS] ‚ùå Nieprawid≈Çowe punkty Lunar: ${lunarPoints}`);
        await updateUserEphemeralReply(message.author.id, config.messages.invalidLunarPoints, [], sharedState.userEphemeralReplies);
        return;
    }
    
    console.log(`[LUNAR_POINTS] ‚úÖ Prawid≈Çowe punkty Lunar: ${lunarPoints}`);
    
    const info = sharedState.userInfo.get(message.author.id);
    if (info) {
        info.lunarPoints = lunarPoints;
        sharedState.userInfo.set(message.author.id, info);
    }
    
    sharedState.userStates.set(message.author.id, {
        step: 'waiting_image',
        rcAmount: userState.rcAmount,
        lunarLevel: userState.lunarLevel,
        lunarPoints
    });
    
    await updateUserEphemeralReply(message.author.id, config.messages.statsQuestion, [], sharedState.userEphemeralReplies);
}

async function handleImageInput(message, userState, sharedState, config, client) {
    console.log(`[IMAGE_INPUT] U≈ºytkownik ${message.author.username} przes≈Ça≈Ç ${message.attachments.size} za≈ÇƒÖcznik√≥w`);
    
    if (message.attachments.size === 0) {
        await safeDeleteMessage(message);
        await updateUserEphemeralReply(message.author.id, 'Musisz przes≈Çaƒá zdjƒôcie!', [], sharedState.userEphemeralReplies);
        return;
    }
    
    const attachment = message.attachments.first();
    console.log(`[IMAGE_INPUT] Typ za≈ÇƒÖcznika: ${attachment.contentType}`);
    
    if (!attachment.contentType || !attachment.contentType.startsWith('image/')) {
        console.log(`[IMAGE_INPUT] ‚ùå Nieprawid≈Çowy typ pliku`);
        await safeDeleteMessage(message);
        await updateUserEphemeralReply(message.author.id, 'Prze≈õlij prawid≈Çowy obraz!', [], sharedState.userEphemeralReplies);
        return;
    }
    
    try {
        await updateUserEphemeralReply(message.author.id, 'üöÄ Rozpoczynam szybkƒÖ analizƒô zdjƒôcia...', [], sharedState.userEphemeralReplies);
        
        const tempImagePath = path.join(__dirname, '../temp', `temp_${Date.now()}_${message.author.id}.png`);
        console.log(`[IMAGE_INPUT] ≈öcie≈ºka tymczasowa: ${tempImagePath}`);
        
        await updateUserEphemeralReply(message.author.id, 'üì• Pobieranie obrazu...', [], sharedState.userEphemeralReplies);
        
        const { downloadImage } = require('../services/ocrService');
        await downloadImage(attachment.url, tempImagePath);
        sharedState.userImages.set(message.author.id, tempImagePath);
        
        const stats = await extractOptimizedStatsFromImage(tempImagePath, message.author.id, sharedState.userEphemeralReplies);
        
        if (!stats || !stats.isValidEquipment) {
            console.log(`[IMAGE_INPUT] ‚ùå Obraz nie zawiera prawid≈Çowych danych`);
            await safeDeleteMessage(message);
            
            try {
                const fs = require('fs').promises;
                await fs.unlink(tempImagePath);
                sharedState.userImages.delete(message.author.id);
            } catch (error) {}
            
            if (stats && stats.error === 'NICK_NOT_FOUND_IN_FIRST_3_LINES') {
                console.log(`[IMAGE_INPUT] ‚ùå Nick nie zosta≈Ç znaleziony w pierwszych 3 linijkach`);
                await updateUserEphemeralReply(message.author.id, config.messages.invalidEquipmentImage, [], sharedState.userEphemeralReplies);
            } else {
                await updateUserEphemeralReply(message.author.id, config.messages.invalidEquipmentImage, [], sharedState.userEphemeralReplies);
            }
            return;
        }
        
        if (!stats.characterAttack && !stats.playerNick) {
            console.log(`[IMAGE_INPUT] ‚ùå Nie uda≈Ço siƒô odczytaƒá danych z obrazu`);
            await safeDeleteMessage(message);
            await updateUserEphemeralReply(message.author.id, '‚ùå Nie uda≈Ço siƒô odczytaƒá danych z obrazu. Spr√≥buj z lepszej jako≈õci zdjƒôciem.', [], sharedState.userEphemeralReplies);
            return;
        }
        
        console.log(`[IMAGE_INPUT] ‚úÖ Pomy≈õlnie przeanalizowano obraz`);
        
        const info = sharedState.userInfo.get(message.author.id);
        if (info) {
            info.characterAttack = stats.characterAttack || null;
            info.playerNick = stats.playerNick || 'Nieznany';
            sharedState.userInfo.set(message.author.id, info);
        }
        
        await safeDeleteMessage(message);
        await updateUserEphemeralReply(message.author.id, '‚úÖ Analiza zako≈Ñczona pomy≈õlnie!', [], sharedState.userEphemeralReplies);
        
        // G≈Å√ìWNA ZMIANA: Obs≈Çuga propozycji nicku dla ≈õcie≈ºki "inne cele"
        if (info && info.purpose === 'Przyszed≈Çem w innym celu') {
            console.log(`[IMAGE_INPUT] U≈ºytkownik ${message.author.username} przyszed≈Ç w innym celu - sprawdzamy nick`);
            
            // Dodajemy client i config do sharedState dla potrzeb tej funkcji
            sharedState.client = client;
            sharedState.config = config;
            
            if (stats.playerNick && stats.playerNick !== 'Nieznany') {
                console.log(`[IMAGE_INPUT] Wykryto nick w grze: ${stats.playerNick}, sprawdzamy podobie≈Ñstwo`);
                await proposeNicknameChange(message.author, stats.playerNick, message.member, null, sharedState, true);
            } else {
                console.log(`[IMAGE_INPUT] Nie wykryto nicku lub nick nieznany - ko≈Ñczenie rekrutacji bez propozycji zmiany`);
                await finishOtherPurposeRecruitment(message.author, sharedState);
            }
            
            sharedState.userStates.delete(message.author.id);
            return;
        }
        
        // Standardowa obs≈Çuga dla ≈õcie≈ºki "Szukam klanu"
        if (stats.characterAttack) {
            console.log(`[IMAGE_INPUT] Przystƒôpujƒô do kwalifikacji klanu dla ${message.author.username} (atak: ${stats.characterAttack})`);
            
            const qualificationData = {
                member: message.member,
                attack: stats.characterAttack,
                user: message.author,
                stats: stats,
                config: config,
                client: client
            };
            
            if (stats.playerNick && stats.playerNick !== 'Nieznany') {
                await proposeNicknameChange(message.author, stats.playerNick, message.member, qualificationData, sharedState, false);
            } else {
                await sendPendingQualification(message.author.id, qualificationData, sharedState);
            }
        }
    } catch (error) {
        console.error(`[IMAGE_INPUT] ‚ùå B≈ÇƒÖd podczas analizy obrazu:`, error);
        await safeDeleteMessage(message);
        await updateUserEphemeralReply(message.author.id, '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas analizy obrazu. Spr√≥buj ponownie z innym zdjƒôciem.', [], sharedState.userEphemeralReplies);
    }
    
    sharedState.userStates.delete(message.author.id);
}

module.exports = {
    handleMessage
};
