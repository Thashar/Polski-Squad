const fs = require('fs').promises;
const path = require('path');
const cron = require('node-cron');
const { createBotLogger } = require('../../utils/consoleLogger');

const logger = createBotLogger('Rekruter');

class RoleMonitoringService {
    constructor(config) {
        this.config = config;
        this.client = null;
        this.cronJob = null;
        this.monitoringData = {};
        this.dataPath = path.resolve(this.config.roleMonitoring.dataFile);
    }

    /**
     * Inicjalizuje serwis monitorowania r√≥l
     * @param {Client} client - Klient Discord
     */
    async initialize(client) {
        this.client = client;
        await this.loadMonitoringData();
        
        if (this.config.roleMonitoring.enabled) {
            this.startCronJob();
            logger.info('Serwis monitorowania r√≥l zosta≈Ç zainicjalizowany');
        }
    }

    /**
     * ≈Åaduje dane monitorowania z pliku
     */
    async loadMonitoringData() {
        try {
            // Utw√≥rz katalog je≈õli nie istnieje
            await fs.mkdir(path.dirname(this.dataPath), { recursive: true });
            
            const data = await fs.readFile(this.dataPath, 'utf8');
            this.monitoringData = JSON.parse(data);
        } catch (error) {
            if (error.code !== 'ENOENT') {
                logger.error(`B≈ÇƒÖd ≈Çadowania danych monitorowania: ${error.message}`);
            }
            this.monitoringData = {};
        }
    }

    /**
     * Zapisuje dane monitorowania do pliku
     */
    async saveMonitoringData() {
        try {
            await fs.writeFile(this.dataPath, JSON.stringify(this.monitoringData, null, 2));
        } catch (error) {
            logger.error(`B≈ÇƒÖd zapisu danych monitorowania: ${error.message}`);
        }
    }

    /**
     * Uruchamia zadanie cron
     */
    startCronJob() {
        if (this.cronJob) {
            this.cronJob.destroy();
        }

        this.cronJob = cron.schedule(this.config.roleMonitoring.checkInterval, () => {
            this.checkUsersWithoutRoles();
        });

        logger.info(`Zadanie cron uruchomione: ${this.config.roleMonitoring.checkInterval}`);
    }

    /**
     * Zatrzymuje zadanie cron
     */
    stopCronJob() {
        if (this.cronJob) {
            this.cronJob.destroy();
            this.cronJob = null;
            logger.info('Zadanie cron zatrzymane');
        }
    }

    /**
     * Sprawdza u≈ºytkownik√≥w bez r√≥l na serwerze
     */
    async checkUsersWithoutRoles() {
        try {
            logger.info('Rozpoczynam sprawdzanie u≈ºytkownik√≥w bez r√≥l...');
            
            const guilds = this.client.guilds.cache;
            for (const [guildId, guild] of guilds) {
                await this.processGuild(guild);
            }
            
            await this.saveMonitoringData();
            logger.info('Zako≈Ñczono sprawdzanie u≈ºytkownik√≥w bez r√≥l');
        } catch (error) {
            logger.error(`B≈ÇƒÖd podczas sprawdzania u≈ºytkownik√≥w: ${error.message}`);
        }
    }

    /**
     * Przetwarza konkretny serwer
     * @param {Guild} guild - Serwer Discord
     */
    async processGuild(guild) {
        try {
            const members = await guild.members.fetch();
            const now = Date.now();

            for (const [userId, member] of members) {
                // Pomi≈Ñ boty
                if (member.user.bot) continue;

                // Sprawd≈∫ czy ma jakiekolwiek role (poza @everyone)
                const hasRoles = member.roles.cache.size > 1;

                if (!hasRoles) {
                    await this.handleUserWithoutRoles(guild, member, now);
                } else {
                    // Usu≈Ñ z monitorowania je≈õli ma role
                    if (this.monitoringData[userId]) {
                        delete this.monitoringData[userId];
                        logger.info(`Usuniƒôto ${member.user.tag} z monitorowania - otrzyma≈Ç role`);
                    }
                }
            }
        } catch (error) {
            logger.error(`B≈ÇƒÖd przetwarzania serwera ${guild.name}: ${error.message}`);
        }
    }

    /**
     * Obs≈Çuguje u≈ºytkownika bez r√≥l
     * @param {Guild} guild - Serwer Discord
     * @param {GuildMember} member - Cz≈Çonek serwera
     * @param {number} now - Aktualny timestamp
     */
    async handleUserWithoutRoles(guild, member, now) {
        const userId = member.user.id;
        const userData = this.monitoringData[userId];

        if (!userData) {
            // Nowy u≈ºytkownik bez r√≥l - rozpocznij monitorowanie
            this.monitoringData[userId] = {
                joinedAt: member.joinedTimestamp || now,
                firstDetected: now,
                warned24h: false,
                guildId: guild.id
            };
            logger.info(`Rozpoczƒôto monitorowanie ${member.user.tag} - bez r√≥l od ${new Date(now).toISOString()}`);
            return;
        }

        const timeSinceJoin = now - userData.joinedAt;
        const warning24h = this.config.roleMonitoring.warning24Hours;

        // Sprawd≈∫ czy minƒô≈Ço 24h i nie wys≈Çano ostrze≈ºenia
        if (timeSinceJoin >= warning24h && !userData.warned24h) {
            await this.send24hWarning(member);
            userData.warned24h = true;
            logger.info(`Wys≈Çano ostrze≈ºenie 24h do ${member.user.tag}`);
        }
    }

    /**
     * Wysy≈Ça ostrze≈ºenie po 24h
     * @param {GuildMember} member - Cz≈Çonek serwera
     */
    async send24hWarning(member) {
        try {
            const warningMessage = `üö® **Ostrze≈ºenie** üö®

Witaj ${member.user.username}!

Od **24 godzin** nie wype≈Çni≈Çe≈õ ankiety na kanale **${this.config.roleMonitoring.waitingRoomChannel}** na serwerze **${member.guild.name}**.

üìã **Dopiero po wype≈Çnieniu ankiety otrzymasz dostƒôp do serwera.**

‚ö†Ô∏è **Je≈ºeli przez nastƒôpne 24 godziny ankieta nie zostanie wype≈Çniona, otrzymasz kick z serwera.**

‚ùì **W razie pyta≈Ñ mo≈ºesz skontaktowaƒá siƒô z w≈Ça≈õcicielem serwera.**

Pozdrawiamy,
Bot Rekruter`;

            await member.send(warningMessage);
            logger.info(`‚úÖ Wys≈Çano ostrze≈ºenie 24h do ${member.user.tag}`);
        } catch (error) {
            logger.error(`‚ùå Nie mo≈ºna wys≈Çaƒá wiadomo≈õci do ${member.user.tag}: ${error.message}`);
        }
    }

    /**
     * Pobiera u≈ºytkownik√≥w gotowych do kicka (48h bez r√≥l)
     * @returns {Array} - Lista u≈ºytkownik√≥w do kicka
     */
    getUsersForKick() {
        const now = Date.now();
        const kick48h = this.config.roleMonitoring.warning24Hours * 2; // 48h
        const usersToKick = [];

        for (const [userId, userData] of Object.entries(this.monitoringData)) {
            const timeSinceJoin = now - userData.joinedAt;
            
            if (timeSinceJoin >= kick48h) {
                usersToKick.push({
                    userId,
                    guildId: userData.guildId,
                    joinedAt: userData.joinedAt,
                    timeSinceJoin
                });
            }
        }

        return usersToKick;
    }

    /**
     * Usuwa u≈ºytkownika z monitorowania
     * @param {string} userId - ID u≈ºytkownika
     */
    removeUserFromMonitoring(userId) {
        if (this.monitoringData[userId]) {
            delete this.monitoringData[userId];
            this.saveMonitoringData();
        }
    }

    /**
     * Zatrzymuje serwis
     */
    stop() {
        this.stopCronJob();
        logger.info('Serwis monitorowania r√≥l zosta≈Ç zatrzymany');
    }
}

module.exports = RoleMonitoringService;