const Tesseract = require('tesseract.js');
const fs = require('fs').promises;
const https = require('https');
const http = require('http');
const sharp = require('sharp');
const { updateUserEphemeralReply } = require('../utils/helpers');
const { createBotLogger } = require('../../utils/consoleLogger');

const logger = createBotLogger('Rekruter');

async function downloadImage(url, filepath) {
    logger.info(`[DOWNLOAD] Rozpoczynam pobieranie obrazu: ${url}`);
    return new Promise((resolve, reject) => {
        const protocol = url.startsWith('https:') ? https : http;
        const file = require('fs').createWriteStream(filepath);
        protocol.get(url, (response) => {
            response.pipe(file);
            file.on('finish', () => {
                file.close();
                logger.info(`[DOWNLOAD] ‚úÖ Pobrano obraz do: ${filepath}`);
                resolve();
            });
        }).on('error', (err) => {
            logger.error(`[DOWNLOAD] ‚ùå B≈ÇƒÖd pobierania obrazu:`, err);
            reject(err);
        });
    });
}

async function preprocessImageForWhiteText(inputPath, outputPath) {
    try {
        logger.info(`[IMAGE] Przetwarzanie obrazu: ${inputPath} -> ${outputPath}`);
        await sharp(inputPath)
            .grayscale()
            .threshold(200)
            .negate()
            .png()
            .toFile(outputPath);
        logger.info(`[IMAGE] ‚úÖ Przetworzono obraz`);
    } catch (error) {
        logger.error(`[IMAGE] ‚ùå B≈ÇƒÖd przetwarzania obrazu:`, error);
        throw error;
    }
}

function checkForEquipmentKeyword(text) {
    const lowerText = text.toLowerCase();
    logger.info(`[OCR] Sprawdzanie s≈Ç√≥w kluczowych Equipment w tek≈õcie`);
    
    const equipmentKeywords = [
        'equipment',
        'equipement',
        'equipmnt',
        'equip',
        'eq'
    ];
    
    for (const keyword of equipmentKeywords) {
        if (lowerText.includes(keyword)) {
            logger.info(`[OCR] ‚úÖ Znaleziono s≈Çowo kluczowe: ${keyword}`);
            return true;
        }
    }
    
    logger.info(`[OCR] ‚ùå Nie znaleziono s≈Ç√≥w kluczowych Equipment`);
    return false;
}

// NOWA FUNKCJA POMOCNICZA - sprawdza czy s≈Çowo zawiera znaki interpunkcyjne
function hasPunctuation(word) {
    return /[.,\/#!$%\^&\*;:{}=\-_`~()[\]"'<>?\\|+=]/.test(word);
}

// POPRAWIONA FUNKCJA - ignoruje s≈Çowa ze znakami interpunkcyjnymi
function findNicknameInText(text) {
    logger.info(`[OCR] Szukanie najd≈Çu≈ºszego nicku BEZ znak√≥w interpunkcyjnych w pierwszych 3 linijkach tekstu`);
    const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    const maxLines = Math.min(3, lines.length);
    logger.info(`[OCR] Sprawdzanie ${maxLines} linii (maksymalnie 3)`);
    
    for (let i = 0; i < maxLines; i++) {
        const line = lines[i];
        logger.info(`[OCR] Sprawdzanie linii ${i + 1}: "${line}"`);
        const words = line.split(/\s+/);
        const filteredWords = words.filter(word => /[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª]/.test(word));
        logger.info(`[OCR] Znalezione s≈Çowa w linii ${i + 1}:`, filteredWords);
        
        // ZMIANA: Szukamy najd≈Çu≈ºszego s≈Çowa BEZ interpunkcji (ignorujemy s≈Çowa z interpunkcjƒÖ)
        let longestWord = '';
        
        for (let j = 0; j < filteredWords.length; j++) {
            const word = filteredWords[j];
            logger.info(`[OCR] Sprawdzanie s≈Çowa ${j + 1}: "${word}"`);
            
            // Sprawd≈∫ czy s≈Çowo zawiera znaki interpunkcyjne
            if (hasPunctuation(word)) {
                logger.info(`[OCR] ‚ùå S≈Çowo "${word}" zawiera znaki interpunkcyjne - IGNORUJƒò`);
                continue; // Pomi≈Ñ to s≈Çowo ca≈Çkowicie
            }
            
            // Sprawd≈∫ d≈Çugo≈õƒá s≈Çowa
            if (word.length >= 3 && word.length > longestWord.length) {
                longestWord = word;
                logger.info(`[OCR] ‚úÖ Nowe najd≈Çu≈ºsze s≈Çowo bez interpunkcji: "${word}" (${word.length} znak√≥w)`);
            } else if (word.length < 3) {
                logger.info(`[OCR] ‚ùå S≈Çowo "${word}" za kr√≥tkie (minimum 3 znaki)`);
            } else {
                logger.info(`[OCR] ‚ùå S≈Çowo "${word}" kr√≥tsze ni≈º obecne najd≈Çu≈ºsze`);
            }
        }
        
        // Je≈õli znaleziono najd≈Çu≈ºsze s≈Çowo w tej linii
        if (longestWord.length >= 3) {
            logger.info(`[OCR] ‚úÖ Znaleziono najd≈Çu≈ºszy nick bez interpunkcji "${longestWord}" w linii ${i + 1}`);
            return { nickname: longestWord, lineIndex: i };
        } else {
            logger.info(`[OCR] ‚ùå Nie znaleziono odpowiednio d≈Çugiego s≈Çowa bez interpunkcji w linii ${i + 1}`);
        }
    }
    
    logger.info(`[OCR] ‚ùå Nie znaleziono nicku w pierwszych 3 linijkach`);
    return { nickname: null, lineIndex: -1 };
}

function extractAttackFromLine(line) {
    logger.info(`[OCR] Ekstraktacja ataku z linii: "${line}"`);
    const numberMatches = line.match(/\b\d+\b/g);
    
    if (numberMatches) {
        logger.info(`[OCR] Znalezione liczby w linii:`, numberMatches);
        for (const numStr of numberMatches) {
            const num = parseInt(numStr);
            logger.info(`[OCR] Sprawdzam liczbƒô: ${num}`);
            if (num >= 1000 && num <= 10000000) {
                logger.info(`[OCR] ‚úÖ Liczba ${num} mie≈õci siƒô w zakresie ataku`);
                return num;
            } else {
                logger.info(`[OCR] ‚ùå Liczba ${num} poza zakresem ataku (1000-10M)`);
            }
        }
    } else {
        logger.info(`[OCR] Nie znaleziono liczb w linii`);
    }
    
    return null;
}

function calculateSimpleConfidence(playerNick, characterAttack) {
    let confidence = 0;
    logger.info(`[OCR] Kalkulacja pewno≈õci:`);
    
    if (playerNick) {
        confidence += 40;
        logger.info(`[OCR] + 40 punkt√≥w za nick`);
        if (playerNick.length >= 4) {
            confidence += 10;
            logger.info(`[OCR] + 10 punkt√≥w za d≈Çugo≈õƒá nicku`);
        }
    }
    
    if (characterAttack) {
        confidence += 50;
        logger.info(`[OCR] + 50 punkt√≥w za atak`);
        if (characterAttack >= 10000) {
            confidence += 10;
            logger.info(`[OCR] + 10 punkt√≥w za wysoki atak`);
        }
    }
    
    const finalConfidence = Math.min(confidence, 100);
    logger.info(`[OCR] Ko≈Ñcowa pewno≈õƒá: ${finalConfidence}%`);
    return finalConfidence;
}

function extractStatsFromLines(text) {
    logger.info(`[OCR] Rozpoczynam ekstraktacjƒô statystyk z tekstu`);
    const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    logger.info(`[OCR] Liczba linii po filtracji: ${lines.length}`);
    
    let playerNick = null;
    let characterAttack = null;
    let nickLineIndex = -1;
    
    const nicknameResult = findNicknameInText(text);
    if (nicknameResult.nickname) {
        playerNick = nicknameResult.nickname;
        nickLineIndex = nicknameResult.lineIndex;
        logger.info(`[OCR] Znaleziono nick "${playerNick}" w linii ${nickLineIndex + 1}`);
    } else {
        logger.info(`[OCR] ‚ùå Nie znaleziono nicku w pierwszych 3 linijkach - zwracam b≈ÇƒÖd`);
        return {
            playerNick: null,
            characterAttack: null,
            confidence: 0,
            isValidEquipment: false
        };
    }
    
    if (nickLineIndex >= 0) {
        logger.info(`[OCR] Szukanie ataku zaczynajƒÖc od linii ${nickLineIndex + 2}`);
        for (let i = nickLineIndex + 1; i < lines.length; i++) {
            const line = lines[i];
            logger.info(`[OCR] Analiza linii ${i + 1} w poszukiwaniu ataku: "${line}"`);
            const attackFromLine = extractAttackFromLine(line);
            if (attackFromLine) {
                characterAttack = attackFromLine;
                logger.info(`[OCR] Znaleziono atak ${characterAttack} w linii ${i + 1}`);
                break;
            }
        }
    }
    
    if (!characterAttack) {
        logger.info(`[OCR] Nie znaleziono ataku w standardowych liniach, przeszukujƒô ca≈Çy tekst`);
        const allNumberMatches = text.match(/\b\d+\b/g);
        if (allNumberMatches) {
            logger.info(`[OCR] Wszystkie znalezione liczby:`, allNumberMatches);
            const numbers = allNumberMatches
                .map(n => parseInt(n))
                .filter(n => n >= 1000 && n <= 10000000)
                .sort((a, b) => b - a);
            logger.info(`[OCR] Liczby po filtracji i sortowaniu (1000-10M):`, numbers);
            
            if (numbers.length > 0) {
                if (numbers[0] <= 10000000) {
                    characterAttack = numbers[0];
                    logger.info(`[OCR] Wybrano najwiƒôkszƒÖ liczbƒô jako atak: ${characterAttack}`);
                } else if (numbers.length > 1 && numbers[1] <= 10000000) {
                    characterAttack = numbers[1];
                    logger.info(`[OCR] Pierwsza liczba przekracza limit, wybrano drugƒÖ najwy≈ºszƒÖ: ${characterAttack}`);
                } else {
                    logger.info(`[OCR] Wszystkie liczby przekraczajƒÖ limit lub sƒÖ nieodpowiednie`);
                }
            }
        }
    }
    
    const result = {
        playerNick,
        characterAttack,
        confidence: calculateSimpleConfidence(playerNick, characterAttack),
        isValidEquipment: true
    };
    
    logger.info(`[OCR] Finalne wyniki ekstraktacji:`, result);
    return result;
}

async function extractOptimizedStatsFromImage(imagePath, userId, userEphemeralReplies) {
    try {
        logger.info(`[OCR] ===== ROZPOCZƒòCIE ANALIZY OCR =====`);
        logger.info(`[OCR] U≈ºytkownik: ${userId}`);
        logger.info(`[OCR] ≈öcie≈ºka obrazu: ${imagePath}`);
        
        const processedPath = imagePath.replace(/\.(jpg|jpeg|png|gif|bmp)$/i, '_processed.png');
        
        await updateUserEphemeralReply(userId, 'üîÑ Przetwarzam obraz...', [], userEphemeralReplies);
        logger.info(`[OCR] Rozpoczynam preprocessowanie obrazu`);
        await preprocessImageForWhiteText(imagePath, processedPath);
        
        await updateUserEphemeralReply(userId, 'üîç Analizujƒô obraz...', [], userEphemeralReplies);
        logger.info(`[OCR] Rozpoczynam rozpoznawanie tekstu Tesseract`);
        
        const { data: { text } } = await Tesseract.recognize(processedPath, 'pol+eng', {
            tessedit_char_whitelist: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ªƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈º: +-%.,()/'
        });
        
        logger.info(`[OCR] ===== WYNIK TESSERACT =====`);
        logger.info(`[OCR] Rozpoznany tekst:`);
        logger.info(text);
        logger.info(`[OCR] ===============================`);
        
        await fs.unlink(processedPath).catch(() => {});
        
        await updateUserEphemeralReply(userId, 'üìä Sprawdzam czy to Equipment...', [], userEphemeralReplies);
        const hasEquipment = checkForEquipmentKeyword(text);
        
        if (!hasEquipment) {
            logger.info(`[OCR] ‚ùå Nie znaleziono s≈Ç√≥w kluczowych Equipment - odrzucam obraz`);
            return {
                isValidEquipment: false,
                playerNick: null,
                characterAttack: null,
                confidence: 0
            };
        }
        
        await updateUserEphemeralReply(userId, 'üìä Analizujƒô statystyki...', [], userEphemeralReplies);
        logger.info(`[OCR] Rozpoczynam analizƒô statystyk`);
        
        const stats = extractStatsFromLines(text);
        
        if (!stats.playerNick) {
            logger.info(`[OCR] ‚ùå Nie znaleziono nicku w pierwszych 3 linijkach - odrzucam obraz`);
            return {
                isValidEquipment: false,
                playerNick: null,
                characterAttack: null,
                confidence: 0,
                error: 'NICK_NOT_FOUND_IN_FIRST_3_LINES'
            };
        }
        
        stats.isValidEquipment = true;
        
        logger.info(`[OCR] ===== WYNIKI ANALIZY =====`);
        logger.info(`[OCR] Nick gracza: ${stats.playerNick}`);
        logger.info(`[OCR] Atak postaci: ${stats.characterAttack}`);
        logger.info(`[OCR] Pewno≈õƒá: ${stats.confidence}%`);
        logger.info(`[OCR] ===========================`);
        
        return stats;
    } catch (error) {
        logger.error(`[OCR] ‚ùå B≈ÇƒÖd podczas analizy OCR:`, error);
        throw error;
    }
}

module.exports = {
    downloadImage,
    preprocessImageForWhiteText,
    checkForEquipmentKeyword,
    findNicknameInText,
    extractAttackFromLine,
    calculateSimpleConfidence,
    extractStatsFromLines,
    extractOptimizedStatsFromImage
};
