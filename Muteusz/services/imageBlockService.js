const fs = require('fs').promises;
const path = require('path');
const { createBotLogger } = require('../../utils/consoleLogger');

const logger = createBotLogger('Muteusz');

class ImageBlockService {
    constructor(config, logService) {
        this.config = config;
        this.logService = logService;
        this.dataFile = path.join(__dirname, '../data/image_blocks.json');
        this.blocks = new Map();
        this.cleanupInterval = null;
    }

    /**
     * Inicjalizuje serwis
     */
    async initialize() {
        try {
            await this.loadBlocks();
            this.startCleanupInterval();
            logger.info('üö´ ImageBlockService zainicjalizowany');
        } catch (error) {
            logger.error(`‚ùå B≈ÇƒÖd inicjalizacji ImageBlockService: ${error.message}`);
            throw error;
        }
    }

    /**
     * ≈Åaduje blokady z pliku
     */
    async loadBlocks() {
        try {
            // Sprawd≈∫ czy plik istnieje
            try {
                await fs.access(this.dataFile);
            } catch (error) {
                // Plik nie istnieje, stw√≥rz pusty
                await this.ensureDataDirectory();
                await fs.writeFile(this.dataFile, JSON.stringify({}, null, 2));
                return;
            }

            const data = await fs.readFile(this.dataFile, 'utf8');
            const blocksData = JSON.parse(data);
            
            // Konwertuj na Map z datami i filtruj wygas≈Çe
            this.blocks.clear();
            let totalLoaded = 0;
            let expiredCount = 0;
            const now = new Date();
            
            for (const [channelId, blockInfo] of Object.entries(blocksData)) {
                totalLoaded++;
                const endTime = new Date(blockInfo.endTime);
                
                if (endTime > now) {
                    // Blokada aktywna - dodaj do mapy
                    this.blocks.set(channelId, {
                        ...blockInfo,
                        endTime: endTime
                    });
                } else {
                    // Blokada wygas≈Ça - zlicz do statystyk
                    expiredCount++;
                }
            }

            // Je≈õli by≈Çy wygas≈Çe blokady, zapisz oczyszczonƒÖ listƒô
            if (expiredCount > 0) {
                await this.saveBlocks();
                logger.info(`üßπ Usuniƒôto ${expiredCount} wygas≈Çych blokad obraz√≥w podczas uruchamiania`);
            }

            logger.info(`üì• Za≈Çadowano ${this.blocks.size} aktywnych blokad obraz√≥w (≈ÇƒÖcznie przetworzono: ${totalLoaded})`);
        } catch (error) {
            logger.error(`‚ùå B≈ÇƒÖd ≈Çadowania blokad: ${error.message}`);
            throw error;
        }
    }

    /**
     * Zapisuje blokady do pliku
     */
    async saveBlocks() {
        try {
            await this.ensureDataDirectory();
            
            // Konwertuj Map na obiekt z ISO stringami dla dat
            const blocksData = {};
            for (const [channelId, blockInfo] of this.blocks.entries()) {
                blocksData[channelId] = {
                    ...blockInfo,
                    endTime: blockInfo.endTime.toISOString()
                };
            }

            await fs.writeFile(this.dataFile, JSON.stringify(blocksData, null, 2));
            logger.info(`üíæ Zapisano ${this.blocks.size} blokad obraz√≥w`);
        } catch (error) {
            logger.error(`‚ùå B≈ÇƒÖd zapisywania blokad: ${error.message}`);
            throw error;
        }
    }

    /**
     * Zapewnia istnienie katalogu data
     */
    async ensureDataDirectory() {
        const dataDir = path.dirname(this.dataFile);
        try {
            await fs.access(dataDir);
        } catch (error) {
            await fs.mkdir(dataDir, { recursive: true });
        }
    }

    /**
     * Dodaje nowƒÖ blokadƒô
     * @param {string} channelId - ID kana≈Çu
     * @param {Date} endTime - Czas zako≈Ñczenia blokady
     * @param {string} moderatorId - ID moderatora
     * @returns {Object} - Wynik operacji
     */
    async addBlock(channelId, endTime, moderatorId) {
        try {
            // Sprawd≈∫ czy blokada ju≈º istnieje i czy nie wygas≈Ça
            if (this.blocks.has(channelId)) {
                const existingBlock = this.blocks.get(channelId);
                const now = new Date();
                
                if (existingBlock.endTime <= now) {
                    // Blokada wygas≈Ça - usu≈Ñ jƒÖ i pozw√≥l na dodanie nowej
                    this.blocks.delete(channelId);
                    await this.saveBlocks();
                    logger.info(`üßπ Usuniƒôto wygas≈ÇƒÖ blokadƒô kana≈Çu ${channelId}`);
                } else {
                    // Blokada wciƒÖ≈º aktywna
                    return {
                        success: false,
                        message: `Kana≈Ç jest ju≈º zablokowany do ${existingBlock.endTime.toLocaleString('pl-PL', { timeZone: 'Europe/Warsaw' })}`
                    };
                }
            }

            // Dodaj nowƒÖ blokadƒô
            const blockInfo = {
                channelId: channelId,
                endTime: endTime,
                moderatorId: moderatorId,
                createdAt: new Date()
            };

            this.blocks.set(channelId, blockInfo);
            await this.saveBlocks();

            return {
                success: true,
                message: 'Blokada zosta≈Ça dodana pomy≈õlnie',
                blockInfo: blockInfo
            };
        } catch (error) {
            logger.error(`‚ùå B≈ÇƒÖd dodawania blokady: ${error.message}`);
            return {
                success: false,
                message: `B≈ÇƒÖd dodawania blokady: ${error.message}`
            };
        }
    }

    /**
     * Usuwa blokadƒô
     * @param {string} channelId - ID kana≈Çu
     * @returns {Object} - Wynik operacji
     */
    async removeBlock(channelId) {
        try {
            if (!this.blocks.has(channelId)) {
                return {
                    success: false,
                    message: 'Kana≈Ç nie jest zablokowany'
                };
            }

            const blockInfo = this.blocks.get(channelId);
            this.blocks.delete(channelId);
            await this.saveBlocks();

            return {
                success: true,
                message: 'Blokada zosta≈Ça usuniƒôta',
                blockInfo: blockInfo
            };
        } catch (error) {
            logger.error(`‚ùå B≈ÇƒÖd usuwania blokady: ${error.message}`);
            return {
                success: false,
                message: `B≈ÇƒÖd usuwania blokady: ${error.message}`
            };
        }
    }

    /**
     * Sprawdza czy kana≈Ç jest zablokowany
     * @param {string} channelId - ID kana≈Çu
     * @returns {boolean} - Czy kana≈Ç jest zablokowany
     */
    isChannelBlocked(channelId) {
        const block = this.blocks.get(channelId);
        if (!block) {
            return false;
        }

        // Sprawd≈∫ czy blokada nie wygas≈Ça
        const now = new Date();
        if (block.endTime <= now) {
            // Usu≈Ñ wygas≈ÇƒÖ blokadƒô
            this.blocks.delete(channelId);
            this.saveBlocks().catch(error => {
                logger.error(`‚ùå B≈ÇƒÖd usuwania wygas≈Çej blokady: ${error.message}`);
            });
            return false;
        }

        return true;
    }

    /**
     * Pobiera informacje o blokadzie kana≈Çu
     * @param {string} channelId - ID kana≈Çu
     * @returns {Object|null} - Informacje o blokadzie lub null
     */
    getBlockInfo(channelId) {
        const block = this.blocks.get(channelId);
        if (!block || block.endTime <= new Date()) {
            return null;
        }
        return block;
    }

    /**
     * Pobiera wszystkie aktywne blokady
     * @returns {Array} - Lista aktywnych blokad
     */
    getAllBlocks() {
        const activeBlocks = [];
        for (const [channelId, block] of this.blocks.entries()) {
            if (block.endTime > new Date()) {
                activeBlocks.push({
                    channelId,
                    ...block
                });
            }
        }
        return activeBlocks;
    }

    /**
     * Uruchamia interwa≈Ç czyszczenia wygas≈Çych blokad
     */
    startCleanupInterval() {
        // Uruchamiaj czyszczenie co 5 minut
        this.cleanupInterval = setInterval(async () => {
            await this.cleanupExpiredBlocks();
        }, 5 * 60 * 1000);
    }

    /**
     * Czy≈õci wygas≈Çe blokady
     */
    async cleanupExpiredBlocks() {
        try {
            const now = new Date();
            let removedCount = 0;

            for (const [channelId, block] of this.blocks.entries()) {
                if (block.endTime <= now) {
                    this.blocks.delete(channelId);
                    removedCount++;
                }
            }

            if (removedCount > 0) {
                await this.saveBlocks();
                logger.info(`üßπ Usuniƒôto ${removedCount} wygas≈Çych blokad obraz√≥w`);
            }
        } catch (error) {
            logger.error(`‚ùå B≈ÇƒÖd czyszczenia wygas≈Çych blokad: ${error.message}`);
        }
    }

    /**
     * Zatrzymuje serwis
     */
    async shutdown() {
        if (this.cleanupInterval) {
            clearInterval(this.cleanupInterval);
            this.cleanupInterval = null;
        }
        logger.info('üõë ImageBlockService zatrzymany');
    }
}

module.exports = ImageBlockService;