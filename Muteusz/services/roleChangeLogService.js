const { EmbedBuilder } = require('discord.js');
const { createBotLogger } = require('../../utils/consoleLogger');

const logger = createBotLogger('Muteusz');

class RoleChangeLogService {
    constructor(config) {
        this.config = config;
        this.logChannelId = '1407485227927998545';
        this.processedAuditLogs = new Set();
        this.auditCheckInterval = null;
    }

    /**
     * Inicjalizuje serwis
     * @param {Client} client - Klient Discord
     */
    async initialize(client) {
        this.client = client;
        
        // Testuj dostƒôp do kana≈Çu logowania
        try {
            const logChannel = await client.channels.fetch(this.logChannelId);
            if (logChannel) {
                logger.info(`‚úÖ Znaleziono kana≈Ç logowania: ${logChannel.name} (${this.logChannelId})`);
            } else {
                logger.error(`‚ùå Nie znaleziono kana≈Çu logowania: ${this.logChannelId}`);
                return;
            }
        } catch (error) {
            logger.error(`‚ùå B≈ÇƒÖd dostƒôpu do kana≈Çu logowania: ${error.message}`);
            return;
        }
        
        // Uruchom sprawdzanie audit logs co 5 sekund (zwiƒôkszam dla test√≥w)
        this.auditCheckInterval = setInterval(async () => {
            logger.info('üîÑ Sprawdzam audit logs...');
            await this.checkAllGuildsForRoleChanges();
        }, 5000);
        
        logger.info('Serwis logowania zmian r√≥l zosta≈Ç zainicjalizowany (sprawdzanie co 5s)');
    }

    /**
     * Sprawdza wszystkie serwery dla zmian r√≥l
     */
    async checkAllGuildsForRoleChanges() {
        if (!this.client || !this.client.guilds) {
            logger.warn('Brak client lub guilds');
            return;
        }

        for (const guild of this.client.guilds.cache.values()) {
            await this.checkGuildRoleChanges(guild);
        }
    }

    /**
     * Sprawdza audit logs serwera dla zmian r√≥l
     * @param {Guild} guild - Serwer Discord
     */
    async checkGuildRoleChanges(guild) {
        try {
            const auditLogs = await guild.fetchAuditLogs({
                type: 25, // MEMBER_ROLE_UPDATE
                limit: 10
            });

            let newCount = 0;
            for (const auditEntry of auditLogs.entries.values()) {
                // Sprawd≈∫ czy ju≈º przetworzyli≈õmy ten audit log
                if (this.processedAuditLogs.has(auditEntry.id)) {
                    continue;
                }

                logger.info(`üÜï Nowy audit log: ${auditEntry.executor?.tag} -> ${auditEntry.target?.tag} (${auditEntry.id})`);
                
                // Przetw√≥rz nowy audit log
                await this.processRoleAuditEntry(auditEntry);
                this.processedAuditLogs.add(auditEntry.id);
                newCount++;
            }
            
            if (newCount > 0) {
                logger.info(`üìä Przetworzono ${newCount} nowych audit logs dla ${guild.name}`);
            }
        } catch (error) {
            logger.error(`B≈ÇƒÖd sprawdzania audit logs dla ${guild.name}: ${error.message}`);
        }
    }

    /**
     * Przetwarza wpis audit log dotyczƒÖcy zmian r√≥l
     * @param {GuildAuditLogsEntry} auditEntry - Wpis z audit logs
     */
    async processRoleAuditEntry(auditEntry) {
        const { executor, target, changes } = auditEntry;
        
        if (!changes || !target) return;

        try {
            const member = await auditEntry.guild.members.fetch(target.id);
            if (!member) return;

            const addedRoles = [];
            const removedRoles = [];

            // Przetw√≥rz zmiany r√≥l
            for (const change of changes) {
                if (change.key === '$add' && change.new) {
                    for (const roleData of change.new) {
                        try {
                            const role = await auditEntry.guild.roles.fetch(roleData.id);
                            if (role) addedRoles.push(role);
                        } catch (error) {
                            // Ignoruj b≈Çƒôdy pobierania r√≥l
                        }
                    }
                } else if (change.key === '$remove' && change.old) {
                    for (const roleData of change.old) {
                        try {
                            const role = await auditEntry.guild.roles.fetch(roleData.id);
                            if (role) removedRoles.push(role);
                        } catch (error) {
                            // Ignoruj b≈Çƒôdy pobierania r√≥l
                        }
                    }
                }
            }

            // Je≈õli sƒÖ jakie≈õ zmiany, wy≈õlij embed
            if (addedRoles.length > 0 || removedRoles.length > 0) {
                await this.sendRoleChangeEmbed(member, addedRoles, removedRoles, executor);
            }

        } catch (error) {
            // Ignoruj b≈Çƒôdy
        }
    }

    /**
     * Wysy≈Ça embed ze zmianami r√≥l
     * @param {GuildMember} member - Cz≈Çonek serwera
     * @param {Array} addedRoles - Dodane role
     * @param {Array} removedRoles - Usuniƒôte role
     * @param {User} executor - Kto wykona≈Ç zmianƒô
     */
    async sendRoleChangeEmbed(member, addedRoles, removedRoles, executor) {
        try {
            const logChannel = await this.client.channels.fetch(this.logChannelId);
            if (!logChannel) return;

            // Okre≈õl kolor embeda
            let color = 0x808080; // Szary domy≈õlny
            if (addedRoles.length > 0 && removedRoles.length === 0) {
                color = 0x00FF00; // Zielony - tylko dodano
            } else if (removedRoles.length > 0 && addedRoles.length === 0) {
                color = 0xFF0000; // Czerwony - tylko usuniƒôto
            }

            const embed = new EmbedBuilder()
                .setTitle(`üîÑ ${member.displayName}`)
                .setColor(color)
                .setThumbnail(member.user.displayAvatarURL({ dynamic: true, size: 128 }))
                .setTimestamp();

            // Dodaj informacje o u≈ºytkowniku
            embed.addFields({
                name: 'üë§ U≈ºytkownik',
                value: `**${member.displayName}** (${member.user.tag})`,
                inline: false
            });

            // Dodaj dodane role
            if (addedRoles.length > 0) {
                const rolesList = addedRoles.map(role => `<@&${role.id}>`).join(' ');
                embed.addFields({
                    name: `‚úÖ Dodano ${addedRoles.length === 1 ? 'rolƒô' : 'role'}\n`,
                    value: rolesList,
                    inline: false
                });
            }

            // Dodaj usuniƒôte role
            if (removedRoles.length > 0) {
                const rolesList = removedRoles.map(role => `<@&${role.id}>`).join(' ');
                embed.addFields({
                    name: `‚ùå Usuniƒôto ${removedRoles.length === 1 ? 'rolƒô' : 'role'}\n`,
                    value: rolesList,
                    inline: false
                });
            }

            // Dodaj wykonawcƒô je≈õli to nie sama osoba
            if (executor && executor.id !== member.id) {
                embed.addFields({
                    name: 'üîß Wykonawca',
                    value: `${executor.tag}`,
                    inline: true
                });
            }

            // Ustaw ikonƒô roli jako thumbnail (pierwsza z listy)
            const primaryRole = addedRoles[0] || removedRoles[0];
            if (primaryRole && primaryRole.iconURL()) {
                embed.setImage(primaryRole.iconURL());
            }

            await logChannel.send({ embeds: [embed] });
            
            logger.info(`üìä Wys≈Çano log zmian r√≥l dla ${member.displayName}: +${addedRoles.length} -${removedRoles.length}`);

        } catch (error) {
            logger.error(`B≈ÇƒÖd podczas wysy≈Çania logu zmian r√≥l: ${error.message}`);
        }
    }

    /**
     * Zatrzymuje serwis
     */
    cleanup() {
        if (this.auditCheckInterval) {
            clearInterval(this.auditCheckInterval);
            this.auditCheckInterval = null;
        }
        this.processedAuditLogs.clear();
        logger.info('Zatrzymano serwis logowania zmian r√≥l');
    }
}

module.exports = RoleChangeLogService;