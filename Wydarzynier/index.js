const { Client, GatewayIntentBits, Partials, Events } = require('discord.js');

const config = require('./config/config');
const { handleInteraction } = require('./handlers/interactionHandlers');
const { handleReactionAdd, handleReactionRemove } = require('./handlers/reactionHandlers');
const { handleMessageUpdate, handleMessageCreate } = require('./handlers/messageHandlers');
const LobbyService = require('./services/lobbyService');
const TimerService = require('./services/timerService');
const BazarService = require('./services/bazarService');
const { createBotLogger } = require('../utils/consoleLogger');

const logger = createBotLogger('Wydarzynier');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.GuildMessageReactions,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.MessageContent,
    ],
    partials: [Partials.Message, Partials.Reaction, Partials.User],
});

// Inicjalizacja serwis√≥w
const lobbyService = new LobbyService(config);
const timerService = new TimerService(config);
const bazarService = new BazarService(config);

// Obiekt zawierajƒÖcy wszystkie wsp√≥≈Çdzielone stany
const sharedState = {
    lobbyService,
    timerService,
    bazarService,
    client,
    config
};

client.once(Events.ClientReady, async () => {
    logger.info(`Bot zalogowany jako ${client.user.tag}`);
    logger.info(`Aktywny na ${client.guilds.cache.size} serwerach`);
    
    client.guilds.cache.forEach(guild => {
        logger.info(`- ${guild.name} (${guild.id})`);
    });
    
    // Wczytaj lobby i timery z plik√≥w
    await lobbyService.loadLobbies();
    await timerService.restoreTimers(sharedState);
    await bazarService.initialize(client);
    
    // Zarejestruj komendy slash
    const { InteractionHandler } = require('./handlers/interactionHandlers');
    const interactionHandler = new InteractionHandler(config, lobbyService, timerService, bazarService);
    await interactionHandler.registerSlashCommands(client);
    
    logger.info('Bot Wydarzynier jest gotowy do pracy!');
});

// Obs≈Çuga komend slash i przycisk√≥w
client.on(Events.InteractionCreate, async (interaction) => {
    try {
        await handleInteraction(interaction, sharedState);
    } catch (error) {
        logger.error('‚ùå B≈ÇƒÖd podczas obs≈Çugi interakcji:', error);
        
        try {
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({ 
                    content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania komendy.', 
                    ephemeral: true 
                });
            } else if (interaction.deferred) {
                await interaction.editReply({ 
                    content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania komendy.' 
                });
            }
        } catch (replyError) {
            logger.error('‚ùå Nie mo≈ºna odpowiedzieƒá na interakcjƒô (prawdopodobnie timeout):', replyError.message);
        }
    }
});

// Obs≈Çuga reakcji
client.on(Events.MessageReactionAdd, async (reaction, user) => {
    try {
        await handleReactionAdd(reaction, user, sharedState);
    } catch (error) {
        logger.error('‚ùå B≈ÇƒÖd podczas obs≈Çugi dodania reakcji:', error);
    }
});

client.on(Events.MessageReactionRemove, async (reaction, user) => {
    try {
        await handleReactionRemove(reaction, user, sharedState);
    } catch (error) {
        logger.error('‚ùå B≈ÇƒÖd podczas obs≈Çugi usuniƒôcia reakcji:', error);
    }
});

// Obs≈Çuga nowych wiadomo≈õci (filtrowanie ping√≥w w lobby)
client.on(Events.MessageCreate, async (message) => {
    try {
        await handleMessageCreate(message, sharedState);
    } catch (error) {
        logger.error('‚ùå B≈ÇƒÖd podczas obs≈Çugi nowej wiadomo≈õci:', error);
    }
});

// Obs≈Çuga dodawania cz≈Çonk√≥w do wƒÖtku
client.on(Events.ThreadMembersUpdate, async (addedMembers, removedMembers, thread) => {
    try {
        // Sprawd≈∫ czy to wƒÖtek lobby
        const lobby = sharedState.lobbyService.getLobbyByThreadId(thread.id);
        if (!lobby) return;

        // Sprawd≈∫ nowo dodanych cz≈Çonk√≥w
        for (const member of addedMembers.values()) {
            // Ignoruj bota
            if (member.user?.bot) continue;
            
            // Sprawd≈∫ czy u≈ºytkownik jest na li≈õcie zaakceptowanych graczy
            if (!lobby.players.includes(member.id)) {
                try {
                    // Sprawd≈∫ czy to administrator - je≈õli tak, ignoruj jego obecno≈õƒá ale nie dodawaj do lobby
                    const guildMember = await thread.guild.members.fetch(member.id).catch(() => null);
                    if (guildMember && guildMember.permissions.has('Administrator')) {
                        logger.info(`üõ°Ô∏è Administrator ${member.user?.username} wszed≈Ç do lobby - ignorujƒô jego obecno≈õƒá`);
                        continue; // Nie usuwaj administratora, ale te≈º nie dodawaj go do lobby
                    }
                    
                    // Usu≈Ñ nieupowa≈ºnionego cz≈Çonka
                    await thread.members.remove(member.id);
                    
                    // Wy≈õlij wiadomo≈õƒá informacyjnƒÖ (bez pingu ≈ºeby uniknƒÖƒá pƒôtli)
                    const warningMsg = await thread.send(
                        `‚ö†Ô∏è **${member.user?.username || 'U≈ºytkownik'}** zosta≈Ç usuniƒôty z wƒÖtku - do≈ÇƒÖczenie mo≈ºliwe tylko przez system akceptacji!`
                    );
                    
                    // Usu≈Ñ wiadomo≈õƒá po 10 sekundach
                    setTimeout(async () => {
                        try {
                            await warningMsg.delete();
                        } catch (error) {
                            // Ignoruj b≈Çƒôdy usuwania
                        }
                    }, 10000);
                    
                } catch (error) {
                    logger.error(`‚ùå B≈ÇƒÖd podczas usuwania nieupowa≈ºnionego cz≈Çonka z wƒÖtku:`, error);
                }
            }
        }

        // Sprawd≈∫ usuniƒôtych cz≈Çonk√≥w i zwolnij miejsca
        for (const member of removedMembers.values()) {
            // Ignoruj bota
            if (member.user?.bot) continue;
            
            // Ignoruj administrator√≥w - nie sƒÖ czƒô≈õciƒÖ oficjalnego lobby
            const guildMember = await thread.guild.members.fetch(member.id).catch(() => null);
            if (guildMember && guildMember.permissions.has('Administrator')) {
                logger.info(`üõ°Ô∏è Administrator ${member.user?.username} opu≈õci≈Ç lobby - ignorujƒô (nie by≈Ç oficjalnie w lobby)`);
                continue;
            }
            
            // Usu≈Ñ z listy graczy je≈õli by≈Ç na li≈õcie
            const playerIndex = lobby.players.indexOf(member.id);
            if (playerIndex > -1) {
                lobby.players.splice(playerIndex, 1);
                
                // Sprawd≈∫ czy lobby nie jest ju≈º pe≈Çne
                if (lobby.isFull && lobby.players.length < sharedState.config.lobby.maxPlayers) {
                    lobby.isFull = false;
                    
                    // Wy≈õlij informacjƒô o zwolnionym miejscu
                    await thread.send(`üì¢ Zwolniono miejsce w lobby! Dostƒôpne miejsca: ${sharedState.config.lobby.maxPlayers - lobby.players.length}`);
                }
                
                // Zapisz zmiany
                await sharedState.lobbyService.saveLobbies();

                // Aktualizuj wiadomo≈õƒá og≈ÇoszeniowƒÖ
                try {
                    const channel = await sharedState.client.channels.fetch(sharedState.config.channels.party);
                    const announcementMessage = await channel.messages.fetch(lobby.announcementMessageId).catch(() => null);
                    
                    if (announcementMessage) {
                        const updatedContent = sharedState.config.messages.partyAnnouncement(
                            lobby.ownerDisplayName, 
                            lobby.players.length, 
                            sharedState.config.lobby.maxPlayers
                        );
                        
                        await announcementMessage.edit(updatedContent);
                    }
                } catch (error) {
                    logger.error('‚ùå B≈ÇƒÖd podczas aktualizacji wiadomo≈õci po wyj≈õciu gracza:', error);
                }
                
            }
        }
    } catch (error) {
        logger.error('‚ùå B≈ÇƒÖd podczas obs≈Çugi aktualizacji cz≈Çonk√≥w wƒÖtku:', error);
    }
});

// Obs≈Çuga aktualizacji wiadomo≈õci (do monitorowania reakcji)
client.on(Events.MessageUpdate, async (oldMessage, newMessage) => {
    try {
        await handleMessageUpdate(oldMessage, newMessage, sharedState);
    } catch (error) {
        logger.error('‚ùå B≈ÇƒÖd podczas obs≈Çugi aktualizacji wiadomo≈õci:', error);
    }
});

// Obs≈Çuga b≈Çƒôd√≥w
client.on('error', error => {
    logger.error(`B≈ÇƒÖd klienta Discord: ${error.message}`);
});

process.on('unhandledRejection', error => {
    logger.error(`Nieobs≈Çu≈ºone odrzucenie Promise: ${error.message}`);
});

process.on('uncaughtException', error => {
    logger.error(`Nieobs≈Çu≈ºony wyjƒÖtek: ${error.message}`);
    process.exit(1);
});

// Eksportuj funkcje do zarzƒÖdzania botem
module.exports = {
    client,
    start: () => {
        return client.login(config.token);
    },
    stop: () => {
        return client.destroy();
    }
};