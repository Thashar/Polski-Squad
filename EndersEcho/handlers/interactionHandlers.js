const { SlashCommandBuilder, REST, Routes, AttachmentBuilder } = require('discord.js');
const { downloadFile, formatMessage } = require('../utils/helpers');
const fs = require('fs').promises;
const { createBotLogger } = require('../../utils/consoleLogger');

const logger = createBotLogger('EndersEcho');
const path = require('path');

class InteractionHandler {
    constructor(config, ocrService, rankingService, logService, roleService) {
        this.config = config;
        this.ocrService = ocrService;
        this.rankingService = rankingService;
        this.logService = logService;
        this.roleService = roleService;
    }

    /**
     * Sprawdza czy kana≈Ç jest dozwolony
     * @param {string} channelId - ID kana≈Çu
     * @returns {boolean} - Czy kana≈Ç jest dozwolony
     */
    isAllowedChannel(channelId) {
        return channelId === this.config.allowedChannelId;
    }

    /**
     * Rejestruje komendy slash
     * @param {Client} client - Klient Discord
     */
    async registerSlashCommands(client) {
        const commands = [
            new SlashCommandBuilder()
                .setName('ranking')
                .setDescription('Wy≈õwietla prywatny ranking graczy z paginacjƒÖ'),
            
            new SlashCommandBuilder()
                .setName('update')
                .setDescription('Aktualizuje wynik na podstawie za≈ÇƒÖczonego obrazu')
                .addAttachmentOption(option =>
                    option.setName('obraz')
                        .setDescription('Obraz z wynikiem zawierajƒÖcy "Best:" i "Total:"')
                        .setRequired(true)),
            
            new SlashCommandBuilder()
                .setName('remove')
                .setDescription('Usuwa gracza z rankingu (tylko dla administrator√≥w)')
                .addUserOption(option =>
                    option.setName('user')
                        .setDescription('U≈ºytkownik do usuniƒôcia z rankingu')
                        .setRequired(true)),
            
            new SlashCommandBuilder()
                .setName('ocr-debug')
                .setDescription('Prze≈ÇƒÖcz szczeg√≥≈Çowe logowanie OCR')
                .addBooleanOption(option =>
                    option.setName('enabled')
                        .setDescription('W≈ÇƒÖcz (true) lub wy≈ÇƒÖcz (false) szczeg√≥≈Çowe logowanie')
                        .setRequired(false))
        ];

        const rest = new REST().setToken(this.config.token);
        
        try {
            logger.info('Rozpoczynam rejestracjƒô slash commands...');
            
            await rest.put(
                Routes.applicationGuildCommands(this.config.clientId, this.config.guildId),
                { body: commands }
            );
            
            logger.info('Slash commands zosta≈Çy pomy≈õlnie zarejestrowane!');
        } catch (error) {
            logger.error('B≈ÇƒÖd podczas rejestracji slash commands:', error);
        }
    }

    /**
     * Obs≈Çuguje interakcje
     * @param {Interaction} interaction - Interakcja Discord
     */
    async handleInteraction(interaction) {
        if (interaction.isChatInputCommand()) {
            if (!this.isAllowedChannel(interaction.channel.id)) {
                await interaction.reply({ 
                    content: this.config.messages.channelNotAllowed, 
                    ephemeral: true 
                });
                return;
            }

            switch (interaction.commandName) {
                case 'ranking':
                    await this.handleRankingCommand(interaction);
                    break;
                case 'update':
                    await this.handleUpdateCommand(interaction);
                    break;
                case 'remove':
                    await this.handleRemoveCommand(interaction);
                    break;
                case 'ocr-debug':
                    await this.handleOcrDebugCommand(interaction);
                    break;
            }
        } else if (interaction.isButton()) {
            await this.handleButtonInteraction(interaction);
        }
    }

    /**
     * Obs≈Çuguje komendƒô rankingu
     * @param {CommandInteraction} interaction - Interakcja komendy
     */
    async handleRankingCommand(interaction) {
        await this.logService.logCommandUsage('ranking', interaction);

        try {
            // Defer reply aby uniknƒÖƒá timeoutu przy d≈Çugich operacjach
            await interaction.deferReply({ ephemeral: true });
            
            const players = await this.rankingService.getSortedPlayers();
            
            if (players.length === 0) {
                await interaction.editReply({ 
                    content: this.config.messages.rankingEmpty
                });
                return;
            }
            
            const totalPages = Math.ceil(players.length / this.config.ranking.playersPerPage);
            const currentPage = 0;
            
            const embed = await this.rankingService.createRankingEmbed(players, currentPage, totalPages, interaction.user.id, interaction.guild);
            const buttons = this.rankingService.createRankingButtons(currentPage, totalPages, false);
            
            const reply = await interaction.editReply({
                embeds: [embed],
                components: [buttons]
            });
            
            // Przechowywanie informacji o aktywnej paginacji
            this.rankingService.addActiveRanking(reply.id, {
                players: players,
                currentPage: currentPage,
                totalPages: totalPages,
                userId: interaction.user.id,
                messageId: reply.id
            });
            
        } catch (error) {
            await this.logService.logRankingError(error, 'handleRankingCommand');
            
            // Sprawd≈∫ czy interakcja ju≈º zosta≈Ça odpowiedziana
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({ 
                    content: this.config.messages.rankingError, 
                    ephemeral: true 
                });
            } else if (interaction.deferred) {
                await interaction.editReply({ 
                    content: this.config.messages.rankingError 
                });
            }
        }
    }

    /**
     * Obs≈Çuguje komendƒô aktualizacji wyniku
     * @param {CommandInteraction} interaction - Interakcja komendy
     */
    async handleUpdateCommand(interaction) {
        await this.logService.logCommandUsage('update', interaction);

        const attachment = interaction.options.getAttachment('obraz');
        
        const isImage = this.config.images.supportedExtensions.some(ext => 
            attachment.name.toLowerCase().endsWith(ext)
        );
        
        if (!isImage) {
            await interaction.reply({ 
                content: this.config.messages.updateNotImage, 
                ephemeral: true 
            });
            return;
        }
        
        // Sprawd≈∫ rozmiar pliku
        if (attachment.size > this.config.images.maxSize) {
            const maxSizeMB = Math.round(this.config.images.maxSize / (1024 * 1024));
            const fileSizeMB = Math.round(attachment.size / (1024 * 1024) * 100) / 100;
            await interaction.reply({ 
                content: `‚ùå Plik jest za du≈ºy! Maksymalny rozmiar: **${maxSizeMB}MB**, tw√≥j plik: **${fileSizeMB}MB**\nüí° **Tip:** Zmniejsz jako≈õƒá obrazu lub u≈ºyj kompresji.`, 
                ephemeral: true 
            });
            return;
        }
        
        // Defer reply przed d≈Çugimi operacjami OCR - prywatnie podczas przetwarzania
        await interaction.deferReply({ ephemeral: true });
        
        // Informuj u≈ºytkownika ≈ºe rozpoczƒôto przetwarzanie
        await interaction.editReply({ content: this.config.messages.updateProcessing });
        
        let tempImagePath = null;
        
        try {
            // Tworzenie katalogu tymczasowego
            await fs.mkdir(this.config.ocr.tempDir, { recursive: true });
            
            tempImagePath = path.join(this.config.ocr.tempDir, `temp_${Date.now()}_${attachment.name}`);
            await downloadFile(attachment.url, tempImagePath);
            
            // Sprawdzenie wymaganych s≈Ç√≥w
            const hasRequiredWords = await this.ocrService.checkRequiredWords(tempImagePath);
            
            if (!hasRequiredWords) {
                await fs.unlink(tempImagePath);
                await interaction.editReply(this.config.messages.updateNoRequiredWords);
                return;
            }
            
            // Ekstrakcja tekstu i wyniku
            const extractedText = await this.ocrService.extractTextFromImage(tempImagePath);
            let bestScore = this.ocrService.extractScoreAfterBest(extractedText);
            
            if (!bestScore || bestScore.trim() === '') {
                await fs.unlink(tempImagePath);
                await interaction.editReply(this.config.messages.updateNoScore);
                return;
            }
            
            // Ekstrakcja nazwy bossa
            const bossName = this.ocrService.extractBossName(extractedText);
            
            // Aktualizacja rankingu
            const userId = interaction.user.id;
            const userName = interaction.user.displayName || interaction.user.username;
            
            const { isNewRecord, currentScore } = await this.rankingService.updateUserRanking(
                userId, userName, bestScore, bossName
            );
            
            await this.logService.logScoreUpdate(userName, bestScore, isNewRecord);
            
            logger.info(`üéØ Przygotowujƒô odpowied≈∫ dla u≈ºytkownika - isNewRecord: ${isNewRecord}`);
            
            if (!isNewRecord) {
                try {
                    // Oczy≈õƒá nazwƒô u≈ºytkownika z nieprawid≈Çowych znak√≥w dla nazwy pliku
                    const safeUserName = userName.replace(/[^a-zA-Z0-9]/g, '_');
                    const fileExtension = attachment.name ? attachment.name.split('.').pop() : 'png';
                    
                    // Sprawd≈∫ rozmiar pliku
                    const fs = require('fs');
                    const fileStats = fs.statSync(tempImagePath);
                    const fileSizeMB = (fileStats.size / (1024 * 1024)).toFixed(2);
                    
                    logger.info(`üîç DEBUG: Plik do za≈ÇƒÖczenia - rozmiar: ${fileSizeMB}MB, ≈õcie≈ºka: ${tempImagePath}`);
                    
                    const imageAttachment = new AttachmentBuilder(tempImagePath, { 
                        name: `wynik_${safeUserName}_${Date.now()}.${fileExtension}` 
                    });
                    
                    const resultEmbed = this.rankingService.createResultEmbed(
                        userName, bestScore, currentScore.score, imageAttachment.name
                    );
                    
                    try {
                        // Sprawd≈∫ czy interaction nie wygas≈Ça
                        logger.info(`üîç DEBUG: interaction.replied: ${interaction.replied}`);
                        logger.info(`üîç DEBUG: interaction.deferred: ${interaction.deferred}`);
                        logger.info(`üîç DEBUG: Time since interaction: ${Date.now() - interaction.createdTimestamp}ms`);
                        
                        // Spr√≥buj najpierw bez pliku - mo≈ºe to problem z attachmentem
                        logger.info('üîç DEBUG: Pr√≥bujƒô wys≈Çaƒá embed BEZ pliku...');
                        
                        const editResult = await interaction.editReply({ 
                            embeds: [resultEmbed]
                        });
                        
                        logger.info('‚úÖ Wys≈Çano embed BEZ pliku - teraz pr√≥bujƒô dodaƒá plik followUp');
                        
                        // Nastƒôpnie wy≈õlij plik jako followUp
                        try {
                            await interaction.followUp({
                                content: `üìé **Oryginalny obraz wyniku:**`,
                                files: [imageAttachment],
                                ephemeral: true
                            });
                            logger.info('‚úÖ Wys≈Çano plik jako followUp');
                        } catch (followUpError) {
                            logger.error('‚ùå B≈ÇƒÖd wysy≈Çania followUp z plikiem:', followUpError);
                        }
                        
                        logger.info('‚úÖ Wys≈Çano embed z wynikiem (brak rekordu)');
                        logger.info(`üîç DEBUG: editReply result type: ${typeof editResult}`);
                        logger.info(`üîç DEBUG: editReply result id: ${editResult?.id}`);
                    } catch (editReplyError) {
                        logger.error('‚ùå B≈ÇƒÖd podczas wysy≈Çania embed (brak rekordu):', editReplyError);
                        
                        // Spr√≥buj wys≈Çaƒá przynajmniej tekstowƒÖ odpowied≈∫
                        try {
                            await interaction.editReply({
                                content: `‚ùå Nie pobito rekordu\n**Gracz:** ${userName}\n**Wynik:** ${bestScore}\n**Obecny rekord:** ${currentScore.score}\n\n*B≈ÇƒÖd wysy≈Çania embed z obrazem*`
                            });
                        } catch (fallbackError) {
                            logger.error('‚ùå Nie mo≈ºna wys≈Çaƒá nawet fallback odpowiedzi:', fallbackError);
                        }
                    }
                    
                    // Usu≈Ñ plik tymczasowy po wys≈Çaniu
                    await fs.unlink(tempImagePath).catch(error => logger.error('B≈ÇƒÖd usuwania pliku tymczasowego:', error));
                    return;
                } catch (noRecordError) {
                    throw noRecordError;
                }
            }
            
            // Nowy rekord - przygotowanie publicznego og≈Çoszenia
            // Oczy≈õƒá nazwƒô u≈ºytkownika z nieprawid≈Çowych znak√≥w dla nazwy pliku
            const safeUserName = userName.replace(/[^a-zA-Z0-9]/g, '_');
            const fileExtension = attachment.name ? attachment.name.split('.').pop() : 'png';
            const imageAttachment = new AttachmentBuilder(tempImagePath, { 
                name: `rekord_${safeUserName}_${Date.now()}.${fileExtension}` 
            });
            
            const publicEmbed = this.rankingService.createRecordEmbed(
                userName, 
                bestScore, 
                interaction.user.displayAvatarURL(),
                imageAttachment.name,
                currentScore ? currentScore.score : null
            );
            
            try {
                // Aktualizuj ephemeral message z informacjƒÖ o sukcesie
                await interaction.editReply({ 
                    content: '‚úÖ **Nowy rekord zosta≈Ç pobity i pozytywnie og≈Çoszony!**\nüèÜ Gratulacje! Tw√≥j wynik zosta≈Ç opublikowany dla wszystkich.' 
                });
                
                logger.info('‚úÖ Wys≈Çano potwierdzenie nowego rekordu (ephemeral)');
                
                // Wy≈õlij publiczne og≈Çoszenie nowego rekordu jako nowƒÖ wiadomo≈õƒá
                await interaction.followUp({ 
                    embeds: [publicEmbed], 
                    files: [imageAttachment] 
                });
                
                logger.info('‚úÖ Wys≈Çano publiczne og≈Çoszenie nowego rekordu');
                
            } catch (newRecordError) {
                logger.error('‚ùå B≈ÇƒÖd podczas wysy≈Çania odpowiedzi o nowym rekordzie:', newRecordError);
                
                // Spr√≥buj wys≈Çaƒá przynajmniej prostƒÖ odpowied≈∫
                try {
                    await interaction.editReply({
                        content: `üèÜ **NOWY REKORD!**\n**Gracz:** ${userName}\n**Nowy rekord:** ${bestScore}\n**Poprzedni:** ${currentScore ? currentScore.score : 'brak'}\n\n*B≈ÇƒÖd wysy≈Çania pe≈Çnego embed*`
                    });
                } catch (fallbackError) {
                    logger.error('‚ùå Nie mo≈ºna wys≈Çaƒá fallback odpowiedzi dla nowego rekordu:', fallbackError);
                }
            }
            
            // Aktualizacja r√≥l TOP po nowym rekordzie
            try {
                const updatedPlayers = await this.rankingService.getSortedPlayers();
                await this.roleService.updateTopRoles(interaction.guild, updatedPlayers);
                await this.logService.logMessage('success', 'Role TOP zosta≈Çy zaktualizowane po nowym rekordzie', interaction);
            } catch (roleError) {
                await this.logService.logMessage('error', `B≈ÇƒÖd aktualizacji r√≥l TOP: ${roleError.message}`, interaction);
            }
            
            // Usuniƒôcie pliku tymczasowego
            await fs.unlink(tempImagePath).catch(error => logger.error('B≈ÇƒÖd usuwania pliku tymczasowego:', error));
            
        } catch (error) {
            
            await this.logService.logOCRError(error, 'handleUpdateCommand');
            
            // Usuniƒôcie pliku tymczasowego w przypadku b≈Çƒôdu
            if (tempImagePath) {
                await fs.unlink(tempImagePath).catch(error => logger.error('B≈ÇƒÖd usuwania pliku tymczasowego:', error));
            }
            
            try {
                await interaction.editReply(this.config.messages.updateError);
            } catch (replyError) {
                logger.error('B≈ÇƒÖd podczas wysy≈Çania komunikatu o b≈Çƒôdzie:', replyError.message);
            }
        }
    }

    /**
     * Obs≈Çuguje komendƒô usuwania gracza z rankingu
     * @param {CommandInteraction} interaction - Interakcja komendy
     */
    async handleRemoveCommand(interaction) {
        await this.logService.logCommandUsage('remove', interaction);

        // Sprawd≈∫ uprawnienia - tylko administratorzy mogƒÖ usuwaƒá graczy
        if (!interaction.member.permissions.has('Administrator')) {
            await interaction.reply({ 
                content: '‚ùå Nie masz uprawnie≈Ñ do u≈ºywania tej komendy. Wymagane: **Administrator**', 
                ephemeral: true 
            });
            return;
        }

        const targetUser = interaction.options.getUser('user');
        
        await interaction.deferReply({ ephemeral: true });

        try {
            // Usu≈Ñ gracza z rankingu
            const wasRemoved = await this.rankingService.removePlayerFromRanking(targetUser.id);
            
            if (!wasRemoved) {
                await interaction.editReply(`‚ùå Gracz ${targetUser.tag} nie by≈Ç w rankingu.`);
                return;
            }

            // Aktualizuj role TOP po usuniƒôciu gracza
            try {
                const updatedPlayers = await this.rankingService.getSortedPlayers();
                await this.roleService.updateTopRoles(interaction.guild, updatedPlayers);
                await this.logService.logMessage('success', `Gracz ${targetUser.tag} zosta≈Ç usuniƒôty z rankingu i zaktualizowano role TOP`, interaction);
            } catch (roleError) {
                await this.logService.logMessage('error', `B≈ÇƒÖd aktualizacji r√≥l TOP po usuniƒôciu gracza: ${roleError.message}`, interaction);
            }

            await interaction.editReply(`‚úÖ Gracz ${targetUser.tag} zosta≈Ç pomy≈õlnie usuniƒôty z rankingu. Role TOP zosta≈Çy zaktualizowane.`);
            
        } catch (error) {
            await this.logService.logMessage('error', `B≈ÇƒÖd usuwania gracza ${targetUser.tag} z rankingu: ${error.message}`, interaction);
            await interaction.editReply(`‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas usuwania gracza z rankingu.`);
        }
    }

    /**
     * Obs≈Çuguje interakcje przycisk√≥w
     * @param {ButtonInteraction} interaction - Interakcja przycisku
     */
    async handleButtonInteraction(interaction) {
        try {
            // Defer update aby uniknƒÖƒá timeoutu
            await interaction.deferUpdate();
            
            const rankingData = this.rankingService.getActiveRanking(interaction.message.id);
            
            if (!rankingData) {
                await interaction.editReply({ 
                    content: this.config.messages.rankingExpired,
                    embeds: [],
                    components: []
                });
                return;
            }
            
            // Sprawdzenie w≈Ça≈õciciela
            if (interaction.user.id !== rankingData.userId) {
                await interaction.followUp({ 
                    content: this.config.messages.rankingWrongUser, 
                    ephemeral: true 
                });
                return;
            }
            
            let newPage = rankingData.currentPage;
            
            switch (interaction.customId) {
                case 'ranking_first':
                    newPage = 0;
                    break;
                case 'ranking_prev':
                    newPage = Math.max(0, rankingData.currentPage - 1);
                    break;
                case 'ranking_next':
                    newPage = Math.min(rankingData.totalPages - 1, rankingData.currentPage + 1);
                    break;
                case 'ranking_last':
                    newPage = rankingData.totalPages - 1;
                    break;
            }
            
            // Aktualizacja danych
            rankingData.currentPage = newPage;
            this.rankingService.updateActiveRanking(interaction.message.id, rankingData);
            
            const embed = await this.rankingService.createRankingEmbed(
                rankingData.players, newPage, rankingData.totalPages, rankingData.userId, interaction.guild
            );
            const buttons = this.rankingService.createRankingButtons(newPage, rankingData.totalPages, false);
            
            await interaction.editReply({
                embeds: [embed],
                components: [buttons]
            });
            
        } catch (error) {
            logger.error('B≈ÇƒÖd w handleButtonInteraction:', error);
            
            // Sprawd≈∫ czy mo≈ºna jeszcze odpowiedzieƒá
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({ 
                    content: this.config.messages.rankingError, 
                    ephemeral: true 
                });
            } else if (interaction.deferred) {
                await interaction.editReply({ 
                    content: this.config.messages.rankingError,
                    embeds: [],
                    components: []
                });
            }
        }
    }

    /**
     * Obs≈Çuguje komendƒô debug OCR
     * @param {CommandInteraction} interaction - Interakcja komendy
     */
    async handleOcrDebugCommand(interaction) {
        // Sprawd≈∫ uprawnienia administratora
        if (!interaction.member.permissions.has('Administrator')) {
            await interaction.reply({
                content: '‚ùå Nie masz uprawnie≈Ñ do u≈ºywania tej komendy. Wymagane: **Administrator**',
                ephemeral: true
            });
            return;
        }
        
        const enabled = interaction.options.getBoolean('enabled');
        
        if (enabled === null) {
            // Sprawd≈∫ aktualny stan
            const currentState = this.config.ocr.detailedLogging.enabled;
            await interaction.reply({
                content: `üîç **Szczeg√≥≈Çowe logowanie OCR:** ${currentState ? '‚úÖ W≈ÇƒÖczone' : '‚ùå Wy≈ÇƒÖczone'}`,
                ephemeral: true
            });
            return;
        }
        
        // Prze≈ÇƒÖcz stan
        this.config.ocr.detailedLogging.enabled = enabled;
        
        const statusText = enabled ? '‚úÖ W≈ÇƒÖczone' : '‚ùå Wy≈ÇƒÖczone';
        const emoji = enabled ? 'üîç' : 'üîá';
        
        logger.info(`${emoji} Szczeg√≥≈Çowe logowanie OCR zosta≈Ço ${enabled ? 'w≈ÇƒÖczone' : 'wy≈ÇƒÖczone'} przez ${interaction.user.tag}`);
        
        await interaction.reply({
            content: `${emoji} **Szczeg√≥≈Çowe logowanie OCR:** ${statusText}`,
            ephemeral: true
        });
    }
}

module.exports = InteractionHandler;