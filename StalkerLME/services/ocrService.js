const Tesseract = require('tesseract.js');
const sharp = require('sharp');
const fs = require('fs').promises;
const path = require('path');
const { calculateNameSimilarity } = require('../utils/helpers');
const { createBotLogger } = require('../../utils/consoleLogger');
const { saveProcessedImage } = require('../../utils/ocrFileUtils');

const logger = createBotLogger('StalkerLME');

class OCRService {
    constructor(config) {
        this.config = config;
        this.tempDir = this.config.ocr.tempDir || './StalkerLME/temp';
        this.processedDir = this.config.ocr.processedDir || './StalkerLME/processed';
    }

    async initializeOCR() {
        try {
            await fs.mkdir(this.tempDir, { recursive: true });
            if (this.config.ocr.saveProcessedImages) {
                await fs.mkdir(this.processedDir, { recursive: true });
            }
            logger.info('[OCR] ‚úÖ Serwis OCR zainicjalizowany');
        } catch (error) {
            logger.error('[OCR] ‚ùå B≈ÇƒÖd inicjalizacji OCR:', error);
        }
    }

    async processImage(attachment) {
        try {
            logger.info('Rozpoczƒôcie analizy OCR');
            logger.info(`üì∑ Przetwarzanie obrazu: ${attachment.url}`);
            
            const response = await fetch(attachment.url);
            const arrayBuffer = await response.arrayBuffer();
            const buffer = Buffer.from(arrayBuffer);
            
            const processedBuffer = await this.processImageWithSharp(buffer);
            
            logger.info('Uruchamianie OCR');
            const { data: { text } } = await Tesseract.recognize(processedBuffer, 'pol', {
                tessedit_char_whitelist: this.config.ocr.polishAlphabet
            });
            
            logger.info('üî§ Odczytany tekst z OCR:');
            const textLines = text.split('\n').filter(line => line.trim().length > 0);
            textLines.forEach((line, index) => {
                logger.info(`${index + 1}: ${line.trim()}`);
            });
            
            return text;
        } catch (error) {
            logger.error('B≈ÇƒÖd OCR');
            logger.error('‚ùå B≈ÇƒÖd podczas przetwarzania obrazu:', error);
            throw error;
        }
    }

    async processImageWithSharp(imageBuffer) {
        try {
            // Pobierz wymiary oryginalnego obrazu dla upscaling
            const metadata = await sharp(imageBuffer).metadata();
            const newWidth = Math.round(metadata.width * this.config.ocr.imageProcessing.upscale);
            const newHeight = Math.round(metadata.height * this.config.ocr.imageProcessing.upscale);
            
            // ≈öcie≈ºka tymczasowa do zapisania przetworzonego obrazu
            const timestamp = Date.now();
            const tempOutputPath = path.join(this.processedDir, `temp_stalker_${timestamp}.png`);
            
            // Zaawansowane przetwarzanie obrazu dla czarnego tekstu
            const processedBuffer = await sharp(imageBuffer)
                .greyscale()
                // 1. Zwiƒôkszanie rozdzielczo≈õci x2 (nowe)
                .resize(newWidth, newHeight, { kernel: 'lanczos3' })
                // 2. Gamma correction (nowe)
                .gamma(this.config.ocr.imageProcessing.gamma)
                // 3. Median filter - redukcja szum√≥w (nowe)
                .median(this.config.ocr.imageProcessing.median)
                // 4. Blur - rozmycie krawƒôdzi (nowe)
                .blur(this.config.ocr.imageProcessing.blur)
                // 5. Normalizacja dla pe≈Çnego wykorzystania zakresu tonalnego (zachowane)
                .normalize()
                // 6. INWERSJA OBRAZU - bia≈Çy tekst staje siƒô czarnym (zachowane)
                .negate()
                // 7. Mocniejszy kontrast po inwersji dla ostrzejszego tekstu (zachowane)
                .linear(this.config.ocr.imageProcessing.contrast, -100)
                // 8. Wyostrzenie krawƒôdzi tekstu (zachowane)
                .sharpen({ sigma: 0.5, m1: 0, m2: 2, x1: 2, y2: 10 })
                // 9. Operacja morfologiczna - zamykanie luk w literach (zachowane)
                .convolve({
                    width: 3,
                    height: 3,
                    kernel: [0, -1, 0, -1, 5, -1, 0, -1, 0]
                })
                // 10. Finalna binaryzacja - wszystkie odcienie szaro≈õci ‚Üí bia≈Çe, tekst ‚Üí czarny (zachowane)
                .threshold(this.config.ocr.imageProcessing.whiteThreshold, { greyscale: false })
                .png();
            
            // Zapisz przetworzony obraz je≈õli w≈ÇƒÖczone (nowe)
            if (this.config.ocr.saveProcessedImages) {
                await processedBuffer.toFile(tempOutputPath);
                
                // Zapisz z w≈Ça≈õciwƒÖ nazwƒÖ i wywo≈Çaj czyszczenie
                await saveProcessedImage(
                    tempOutputPath,
                    this.processedDir,
                    'STALKER',
                    'stalker',
                    this.config.ocr.maxProcessedFiles,
                    logger
                );
                
                // Usu≈Ñ plik tymczasowy
                await fs.unlink(tempOutputPath).catch(() => {});
            }
            
            // Zwr√≥ƒá buffer do OCR
            const buffer = await processedBuffer.toBuffer();
            
            return buffer;
        } catch (error) {
            logger.error('‚ùå B≈ÇƒÖd podczas przetwarzania obrazu:', error);
            throw error;
        }
    }

    async extractPlayersFromText(text, guild = null, requestingMember = null) {
        try {
            logger.info('Analiza tekstu');
            logger.info('üéØ Nowa logika: nick z roli ‚Üí OCR ‚Üí sprawdzanie ko≈Ñca linii...');
            
            if (!guild || !requestingMember) {
                logger.error('‚ùå Brak guild lub requestingMember - nie mo≈ºna kontynuowaƒá');
                return [];
            }
            
            // Krok 1: Pobierz nicki z odpowiedniej roli
            const roleNicks = await this.getRoleNicks(guild, requestingMember);
            if (roleNicks.length === 0) {
                logger.info('‚ùå Brak nick√≥w z odpowiedniej roli');
                return [];
            }
            
            logger.info(`üë• Znaleziono ${roleNicks.length} nick√≥w z roli: ${roleNicks.map(n => n.displayName).join(', ')}`);
            
            // Krok 2: Przygotuj linie OCR
            const lines = text.split('\n').filter(line => line.trim().length > 0);
            
            // Oblicz ≈õredniƒÖ d≈Çugo≈õƒá linii dla informacji
            const avgLineLength = lines.reduce((sum, line) => sum + line.trim().length, 0) / lines.length;
            logger.info(`üìè ≈örednia d≈Çugo≈õƒá linii: ${avgLineLength.toFixed(1)} znak√≥w`);
            
            // Analizuj wszystkie linie (usu≈Ñ filtrowanie wed≈Çug ≈õredniej)
            const validLines = lines.filter(line => line.trim().length >= 5); // Minimum 5 znak√≥w
            logger.info(`üìã Analizujƒô ${validLines.length}/${lines.length} linii (minimum 5 znak√≥w)`);
            
            const confirmedPlayers = [];
            const processedNicks = new Set(); // ≈öledzenie ju≈º przetworzonych nick√≥w z zerem
            
            // Krok 3: Dla ka≈ºdej linii znajd≈∫ najlepiej dopasowany nick z roli
            for (let i = 0; i < validLines.length; i++) {
                const line = validLines[i];
                const lineNumber = lines.findIndex(l => l.trim() === line.trim()) + 1;
                
                // Szczeg√≥≈Çowe logowanie analizy linii
                if (this.config.ocr.detailedLogging.enabled && this.config.ocr.detailedLogging.logLineAnalysis) {
                    logger.info(`   üìã Linia ${lineNumber}: "${line.trim()}"`);
                }
                
                // Znajd≈∫ najlepsze dopasowanie ze wszystkich nick√≥w z roli
                let bestMatch = null;
                let bestSimilarity = 0;
                
                for (const roleNick of roleNicks) {
                    const similarity = this.calculateLineSimilarity(line, roleNick.displayName);
                    
                    // Szczeg√≥≈Çowe logowanie podobie≈Ñstwa
                    if (this.config.ocr.detailedLogging.enabled && this.config.ocr.detailedLogging.logSimilarityCalculations) {
                        if (similarity >= this.config.ocr.detailedLogging.similarityThreshold) {
                            logger.info(`      üîç "${roleNick.displayName}" vs "${line.trim()}" ‚Üí ${(similarity * 100).toFixed(1)}%`);
                        }
                    }
                    
                    // Dynamiczny pr√≥g podobie≈Ñstwa na podstawie d≈Çugo≈õci nicka
                    let requiredSimilarity = 0.6;
                    if (roleNick.displayName.length <= 5) {
                        requiredSimilarity = 0.75; // Wy≈ºszy pr√≥g dla kr√≥tkich nick√≥w
                    } else if (roleNick.displayName.length <= 8) {
                        requiredSimilarity = 0.7;  // ≈öredni pr√≥g dla ≈õrednich nick√≥w
                    }
                    
                    if (similarity >= requiredSimilarity && 
                        (similarity > bestSimilarity || 
                         (similarity === bestSimilarity && roleNick.displayName.length > (bestMatch?.displayName?.length || 0)))) {
                        bestSimilarity = similarity;
                        bestMatch = roleNick;
                    }
                }
                
                if (bestMatch) {
                    // Szczeg√≥≈Çowe logowanie dopasowania
                    if (this.config.ocr.detailedLogging.enabled && this.config.ocr.detailedLogging.logNickMatching) {
                        logger.info(`      ‚úÖ Najlepsze dopasowanie: "${bestMatch.displayName}" (${(bestSimilarity * 100).toFixed(1)}%)`);
                    }
                    
                    // DODATKOWA WALIDACJA: Dla niskiego/≈õredniego podobie≈Ñstwa sprawd≈∫ czy to nie fragment innego s≈Çowa
                    const maxFragmentCheckSimilarity = bestMatch.displayName.length <= 5 ? 0.85 : 0.8;
                    if (bestSimilarity < maxFragmentCheckSimilarity) {
                        const lineLower = line.toLowerCase().trim();
                        const nickLower = bestMatch.displayName.toLowerCase();
                        
                        // Sprawd≈∫ czy nick znajduje siƒô jako kompletne s≈Çowo, a nie fragment
                        const wordBoundaryPattern = new RegExp(`\\b${nickLower}\\b`);
                        if (!wordBoundaryPattern.test(lineLower)) {
                            // Nick nie wystƒôpuje jako kompletne s≈Çowo - mo≈ºe byƒá fragmentem
                            // Sprawd≈∫ czy ca≈Ça linia mo≈ºe byƒá jednym s≈Çowem zawierajƒÖcym nick jako fragment
                            const words = lineLower.split(/\s+/);
                            const containsAsFragment = words.some(word => 
                                word.includes(nickLower) && word !== nickLower && word.length > nickLower.length
                            );
                            
                            if (containsAsFragment) {
                                logger.info(`      ‚ö†Ô∏è Nick "${bestMatch.displayName}" wykryty jako fragment s≈Çowa "${words.find(w => w.includes(nickLower) && w !== nickLower)}", pomijam`);
                                continue; // Pomi≈Ñ to dopasowanie
                            }
                        }
                    }
                    
                    // Krok 4: Sprawd≈∫ koniec linii za nickiem dla wyniku
                    let endResult = this.analyzeLineEnd(line, bestMatch.displayName);
                    
                    // Szczeg√≥≈Çowe logowanie analizy ko≈Ñca linii
                    if (this.config.ocr.detailedLogging.enabled && this.config.ocr.detailedLogging.logEndAnalysis) {
                        logger.info(`      üîö Analiza ko≈Ñca linii: typ="${endResult.type}", warto≈õƒá="${endResult.value}"`);
                    }
                    
                    // Je≈õli nick ma 10+ liter i nie znaleziono wyniku/zera w tej linii, sprawd≈∫ nastƒôpnƒÖ liniƒô
                    if (bestMatch.displayName.length >= 10 && endResult.type === 'unknown') {
                        // Znajd≈∫ rzeczywistƒÖ nastƒôpnƒÖ liniƒô w oryginalnych liniach, nie w filtrowanych
                        const currentLineText = line.trim();
                        const allLines = text.split('\n').filter(line => line.trim().length > 0);
                        const currentLineIndex = allLines.findIndex(l => l.trim() === currentLineText);
                        
                        if (currentLineIndex !== -1 && currentLineIndex + 1 < allLines.length) {
                            const nextLine = allLines[currentLineIndex + 1];
                            const nextEndResult = this.analyzeLineEnd(nextLine, null); // W nastƒôpnej linii nie szukamy za nickiem
                            
                            if (this.config.ocr.detailedLogging.enabled && this.config.ocr.detailedLogging.logEndAnalysis) {
                                logger.info(`      üîÑ Sprawdzanie nastƒôpnej linii dla d≈Çugiego nicka: "${nextLine.trim()}"`);
                                logger.info(`      üîö Wynik nastƒôpnej linii: typ="${nextEndResult.type}", warto≈õƒá="${nextEndResult.value}"`);
                            }
                            
                            if (nextEndResult.type !== 'unknown') {
                                endResult = nextEndResult;
                                if (this.config.ocr.detailedLogging.enabled && this.config.ocr.detailedLogging.logEndAnalysis) {
                                    logger.info(`      ‚úÖ U≈ºyto wyniku z nastƒôpnej linii`);
                                }
                            }
                        }
                    }
                    
                    if (endResult.type === 'zero' || endResult.type === 'unknown') {
                        // Sprawd≈∫ czy ten nick z zerem ju≈º zosta≈Ç przetworzony
                        if (processedNicks.has(bestMatch.displayName)) {
                            continue;
                        }
                        
                        // Sprawd≈∫ czy na ko≈Ñcu linii jest symbol ¬© (niepewno≈õƒá)
                        const hasUncertainty = line.trim().endsWith('¬©');
                        
                        // Dodaj nick do zbioru przetworzonych
                        processedNicks.add(bestMatch.displayName);
                        
                        confirmedPlayers.push({
                            detectedNick: bestMatch.displayName,
                            user: bestMatch,
                            confirmed: true,
                            line: line.trim(),
                            endValue: endResult.value,
                            uncertain: hasUncertainty
                        });
                        
                        logger.info(`   ‚úÖ Linia ${lineNumber}: "${bestMatch.displayName}" (${(bestSimilarity * 100).toFixed(1)}%) POTWIERDZONE ZERO!`);
                    } else if (endResult.type === 'negative') {
                        logger.info(`   ‚ùå Linia ${lineNumber}: "${bestMatch.displayName}" (${(bestSimilarity * 100).toFixed(1)}%) Wynik negatywny: ${endResult.value}`);
                    }
                } else {
                    // Nie loguj je≈õli brak dopasowania - za du≈ºo szumu
                }
            }
            
            const resultNicks = confirmedPlayers.map(p => p.detectedNick);
            
            logger.info(`üìä PODSUMOWANIE ANALIZY OCR:`);
            logger.info(`   üéØ Potwierdzonych graczy z zerem: ${confirmedPlayers.length}`);
            logger.info(`   üë• Lista: ${resultNicks.join(', ')}`);
            return resultNicks;
        } catch (error) {
            logger.error('B≈ÇƒÖd analizy tekstu');
            logger.error('‚ùå B≈ÇƒÖd analizy tekstu:', error);
            return [];
        }
    }

    hasZeroScore(line) {
        // Convert problematic patterns to 0
        let processedLine = line.replace(/\(1\)/g, '0');  // Pattern (1)
        processedLine = processedLine.replace(/\[1\]/g, '0');  // Pattern [1]
        processedLine = processedLine.replace(/\[1(?!\])/g, '0'); // Pattern [1 (no closing bracket)
        processedLine = processedLine.replace(/\(1(?!\))/g, '0'); // Pattern (1 (no closing bracket)
        processedLine = processedLine.replace(/\(9\)/g, '0');  // Pattern (9) - treated as 0
        processedLine = processedLine.replace(/\[9\]/g, '0');  // Pattern [9] - treated as 0
        processedLine = processedLine.replace(/1\)/g, '0');   // Pattern 1) - treated as 0
        processedLine = processedLine.replace(/\(0\)/g, '0');  // Pattern (0) - treated as 0
        processedLine = processedLine.replace(/\[o\]/g, '0');  // Pattern [o] - treated as 0
        processedLine = processedLine.replace(/\(o\)/g, '0');  // Pattern (o) - treated as 0
        processedLine = processedLine.replace(/\(o/g, '0');  // Pattern (o - treated as 0
        processedLine = processedLine.replace(/o\)/g, '0');  // Pattern o) - treated as 0
        processedLine = processedLine.replace(/\[o/g, '0');  // Pattern [o - treated as 0
        processedLine = processedLine.replace(/o\]/g, '0');  // Pattern o] - treated as 0
        processedLine = processedLine.replace(/\([a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª]\)/g, '0');  // Pattern (single letter) - treated as 0
        processedLine = processedLine.replace(/\[[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª]\]/g, '0');  // Pattern [single letter] - treated as 0
        processedLine = processedLine.replace(/\(\d\)/g, '0');  // Pattern (single digit) - treated as 0
        processedLine = processedLine.replace(/\[\d\]/g, '0');  // Pattern [single digit] - treated as 0
        // Pattern single letter with spaces - treated as 0 (but not if followed by digits)
        processedLine = processedLine.replace(/\s[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª]\s(?!\d)/g, ' 0 ');
        // Pattern single letter at end - treated as 0 (but only if not preceded by digit)
        processedLine = processedLine.replace(/(?<!\d)\s[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª]$/g, ' 0');
        processedLine = processedLine.replace(/\s\d\s/g, ' 0 ');  // Pattern single digit with spaces - treated as 0
        processedLine = processedLine.replace(/\s\d$/g, ' 0');  // Pattern single digit at end - treated as 0
        
        const zeroPatterns = [
            /\s+0\s+/, /\s+0$/, /^0\s+/, /\s+0\.0\s+/, /\s+0\.0$/, /\s+0,0\s+/, /\s+0,0$/
        ];
        
        const oPatterns = [
            /\s+o\s+/, /\s+o$/, /^o\s+/
        ];
        
        // Check "zo" as score 0
        const zoPatterns = [
            /\s+zo\s+/, /\s+zo$/, /^zo\s+/
        ];
        
        // Check zero patterns
        for (const pattern of zeroPatterns) {
            if (pattern.test(processedLine)) {
                return true;
            }
        }
        
        // Check "zo" patterns
        for (const pattern of zoPatterns) {
            if (pattern.test(processedLine.toLowerCase())) {
                return true;
            }
        }
        
        // Check "e" patterns (b≈ÇƒÖd OCR dla 0)
        const ePatterns = [
            /\s+e\s+/, /\s+e$/, /^e\s+/
        ];
        
        // Check "o" patterns
        for (const pattern of oPatterns) {
            if (pattern.test(processedLine)) {
                const threeDigitPattern = /\d{3}$/;
                if (threeDigitPattern.test(processedLine.trim())) {
                    return false;
                }
                
                // Sprawd≈∫ czy po "o" nie ma dw√≥ch liter lub cyfr
                const twoCharAfterOPattern = /o[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª0-9]{2,}/;
                if (twoCharAfterOPattern.test(processedLine)) {
                    return false;
                }
                
                // Sprawd≈∫ czy po "o" nie ma spacji i dw√≥ch liter/cyfr
                const spaceAndTwoCharPattern = /o\s[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª0-9]{2,}/;
                if (spaceAndTwoCharPattern.test(processedLine)) {
                    return false;
                }
                
                return true;
            }
        }
        
        // Check "e" patterns (b≈ÇƒÖd OCR dla 0)
        for (const pattern of ePatterns) {
            if (pattern.test(processedLine)) {
                const threeDigitPattern = /\d{3}$/;
                if (threeDigitPattern.test(processedLine.trim())) {
                    return false;
                }
                
                // Sprawd≈∫ czy po "e" nie ma dw√≥ch liter lub cyfr
                const twoCharAfterEPattern = /e[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª0-9]{2,}/;
                if (twoCharAfterEPattern.test(processedLine)) {
                    return false;
                }
                
                // Sprawd≈∫ czy po "e" nie ma spacji i dw√≥ch liter/cyfr
                const spaceAndTwoCharEPattern = /e\s[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª0-9]{2,}/;
                if (spaceAndTwoCharEPattern.test(processedLine)) {
                    return false;
                }
                
                return true;
            }
        }
        
        
        return false;
    }

    getZeroElementsFromLine(line) {
        const zeroElements = [];
        
        // Wszystkie wzorce zero, kt√≥re mogƒÖ wystƒÖpiƒá w linii
        const zeroPatterns = [
            /\(1\)/g, /\[1\]/g, /\[1(?!\])/g, /\(1(?!\))/g,
            /\(9\)/g, /\[9\]/g, /1\)/g, /\(0\)/g,
            /\[o\]/g, /\(o\)/g, /\(o/g, /o\)/g, /\[o/g, /o\]/g,
            /\([a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª]\)/g, /\[[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª]\]/g,
            /\(\d\)/g, /\[\d\]/g,
            /\s[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª]\s(?!\d)/g, /(?<!\d)\s[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª]$/g,
            /\s\d\s/g, /\s\d$/g,
            /\s+0\s+/g, /\s+0$/g, /^0\s+/g, /\s+0\.0\s+/g, /\s+0\.0$/g, /\s+0,0\s+/g, /\s+0,0$/g,
            /\s+o\s+/g, /\s+o$/g, /^o\s+/g,
            /\s+e\s+/g, /\s+e$/g, /^e\s+/g,
            /\s+zo\s+/g, /\s+zo$/g, /^zo\s+/g,
            /\s+ze\s+/g, /\s+ze$/g, /^ze\s+/g
        ];
        
        // Znajd≈∫ wszystkie dopasowania w linii
        for (const pattern of zeroPatterns) {
            const matches = line.match(pattern);
            if (matches) {
                zeroElements.push(...matches.map(match => match.trim()));
            }
        }
        
        // Usu≈Ñ duplikaty i puste stringi
        return [...new Set(zeroElements)].filter(element => element.length > 0);
    }

    async findSimilarUserOnServer(guild, detectedNick) {
        try {
            const members = await guild.members.fetch();
            let bestMatch = null;
            let bestSimilarity = 0;
            
            for (const [userId, member] of members) {
                const similarity = calculateNameSimilarity(detectedNick, member.displayName);
                
                if (similarity >= 0.7 && similarity > bestSimilarity) {
                    bestSimilarity = similarity;
                    bestMatch = {
                        userId: userId,
                        member: member,
                        displayName: member.displayName,
                        similarity: similarity
                    };
                }
            }
            
            return bestMatch;
        } catch (error) {
            logger.error('‚ùå B≈ÇƒÖd wyszukiwania podobnego u≈ºytkownika:', error);
            return null;
        }
    }

    async confirmZeroWithAdditionalCheck(detectedNick, currentLine, allLines, currentIndex) {
        // Szukaj dodatkowego zera za nickiem w tej samej linii
        const nickPosition = currentLine.indexOf(detectedNick);
        if (nickPosition !== -1) {
            const afterNick = currentLine.substring(nickPosition + detectedNick.length);
            if (this.hasZeroScore(afterNick)) {
                logger.info(`   üîç Znaleziono dodatkowe zero za nickiem w tej samej linii`);
                return true;
            }
        }
        
        // Je≈õli nick jest d≈Çugi (>15 znak√≥w), sprawd≈∫ nastƒôpnƒÖ liniƒô
        if (detectedNick.length > 15 && currentIndex + 1 < allLines.length) {
            const nextLine = allLines[currentIndex + 1];
            if (this.hasZeroScore(nextLine)) {
                logger.info(`   üîç Znaleziono zero w nastƒôpnej linii dla d≈Çugiego nicka (${detectedNick.length} znak√≥w)`);
                return true;
            }
        }
        
        return false;
    }

    isLikelyPlayerName(word) {
        // Sprawdzenie czy s≈Çowo prawdopodobnie jest nazwƒÖ gracza
        if (!word || word.length < 3 || word.length > 20) {
            return false;
        }
        
        // Odrzucamy czyste liczby
        if (/^\d+$/.test(word)) {
            return false;
        }
        
        // Odrzucamy s≈Çowa zawierajƒÖce tylko znaki specjalne
        if (!/[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª]/.test(word)) {
            return false;
        }
        
        return true;
    }

    isPlayerLine(line) {
        const patterns = [
            /\b\d+\b/,
            /\b0\b/,
            /damage/i,
            /dmg/i,
            /score/i,
            /points/i,
            /punkty/i,
            /obra≈ºenia/i
        ];
        
        return patterns.some(pattern => pattern.test(line));
    }

    async findUsersInGuild(guild, playerNames, requestingMember = null) {
        try {
            logger.info('Wyszukiwanie u≈ºytkownik√≥w');
            logger.info(`üè∞ Serwer: ${guild.name}`);
            logger.info(`üîç Szukane nazwy: ${playerNames.join(', ')}`);
            
            const foundUsers = [];
            const members = await guild.members.fetch();
            logger.info(`üë• Znaleziono ${members.size} cz≈Çonk√≥w serwera`);
            
            // Sprawd≈∫ czy u≈ºytkownik ma kt√≥rej≈õ z r√≥l TARGET i ogranicz wyszukiwanie
            let restrictToRole = null;
            if (requestingMember) {
                const targetRoleIds = Object.values(this.config.targetRoles);
                for (const roleId of targetRoleIds) {
                    if (requestingMember.roles.cache.has(roleId)) {
                        restrictToRole = roleId;
                        logger.info(`üéØ Ograniczam wyszukiwanie do roli: ${roleId}`);
                        break;
                    }
                }
            }
            
            for (const playerName of playerNames) {
                const candidates = [];
                
                for (const [userId, member] of members) {
                    // Je≈õli jest ograniczenie do roli, sprawd≈∫ czy cz≈Çonek ma tƒô rolƒô
                    if (restrictToRole && !member.roles.cache.has(restrictToRole)) {
                        continue;
                    }
                    
                    // Sprawd≈∫ podobie≈Ñstwo tylko z displayName (nick na serwerze)
                    const displaySimilarity = calculateNameSimilarity(playerName, member.displayName);
                    
                    if (displaySimilarity >= 0.7) {
                        candidates.push({
                            userId: userId,
                            member: member,
                            matchedName: playerName,
                            displayName: member.displayName,
                            similarity: displaySimilarity,
                            matchedField: 'displayName'
                        });
                    }
                }
                
                if (candidates.length > 0) {
                    // Sortuj kandydat√≥w wed≈Çug podobie≈Ñstwa (najwy≈ºsze pierwsze)
                    candidates.sort((a, b) => b.similarity - a.similarity);
                    
                    // Wybierz najlepszego kandydata
                    const bestMatch = candidates[0];
                    foundUsers.push({
                        userId: bestMatch.userId,
                        member: bestMatch.member,
                        matchedName: playerName,
                        displayName: bestMatch.displayName,
                        similarity: bestMatch.similarity
                    });
                    
                    logger.info(`‚úÖ Dopasowano: ${playerName} -> ${bestMatch.member.displayName} - ${(bestMatch.similarity * 100).toFixed(1)}% podobie≈Ñstwa`);
                    
                    // Poka≈º alternatywnych kandydat√≥w je≈õli jest ich wiƒôcej
                    if (candidates.length > 1) {
                        logger.info(`   Alternatywni kandydaci:`);
                        for (let i = 1; i < Math.min(candidates.length, 3); i++) {
                            const alt = candidates[i];
                            logger.info(`   - ${alt.member.displayName} - ${(alt.similarity * 100).toFixed(1)}%`);
                        }
                    }
                } else {
                    logger.info(`‚ùå Nie znaleziono kandydata z minimum 70% podobie≈Ñstwa dla: ${playerName}`);
                }
            }
            
            logger.info(`Dopasowano ${foundUsers.length}/${playerNames.length} u≈ºytkownik√≥w`);
            if (restrictToRole) {
                logger.info(`üéØ Wyszukiwanie ograniczone do roli: ${restrictToRole}`);
            }
            return foundUsers;
        } catch (error) {
            logger.error('B≈ÇƒÖd wyszukiwania');
            logger.error('‚ùå B≈ÇƒÖd wyszukiwania u≈ºytkownik√≥w:', error);
            return [];
        }
    }

    async getRoleNicks(guild, requestingMember) {
        try {
            const targetRoleIds = Object.values(this.config.targetRoles);
            let userRoleId = null;
            
            // Znajd≈∫ rolƒô u≈ºytkownika wykonujƒÖcego polecenie
            for (const roleId of targetRoleIds) {
                if (requestingMember.roles.cache.has(roleId)) {
                    userRoleId = roleId;
                    break;
                }
            }
            
            if (!userRoleId) {
                logger.info('‚ùå U≈ºytkownik nie posiada ≈ºadnej z r√≥l TARGET');
                return [];
            }
            
            
            const members = await guild.members.fetch();
            const roleMembers = [];
            
            for (const [userId, member] of members) {
                if (member.roles.cache.has(userRoleId)) {
                    roleMembers.push({
                        userId: userId,
                        member: member,
                        displayName: member.displayName
                    });
                }
            }
            
            logger.info(`üë• Znaleziono ${roleMembers.length} cz≈Çonk√≥w z rolƒÖ ${userRoleId}`);
            return roleMembers;
        } catch (error) {
            logger.error('‚ùå B≈ÇƒÖd pobierania nick√≥w z roli:', error);
            return [];
        }
    }


    calculateLineSimilarity(line, nick) {
        const lineLower = line.toLowerCase().replace(/[^a-z0-9]/g, ''); // Usu≈Ñ wszystkie znaki specjalne
        const nickLower = nick.toLowerCase().replace(/[^a-z0-9]/g, '');
        
        // Sprawd≈∫ czy nick wystƒôpuje w linii, ale tylko je≈õli nick ma 3+ znaki
        // To zapobiega false positive dla kr√≥tkich fragment√≥w jak "21"
        if (nickLower.length >= 3 && lineLower.includes(nickLower)) {
            return 1.0; // 100% je≈õli nick jest w linii
        }
        
        // Dodatkowe sprawdzenie: czy nick wystƒôpuje z ma≈Çymi b≈Çƒôdami OCR
        if (nickLower.length >= 5) {
            const similarity = this.calculateFuzzyMatch(lineLower, nickLower);
            if (similarity >= 0.9) {
                return similarity; // Wysokie podobie≈Ñstwo dla prawie idealnych dopasowa≈Ñ
            }
        }
        
        // Oblicz podobie≈Ñstwo na podstawie kolejnych znak√≥w z nicku
        return this.calculateOrderedSimilarity(lineLower, nickLower);
    }

    /**
     * Oblicza podobie≈Ñstwo z tolerancjƒÖ na ma≈Çe b≈Çƒôdy OCR
     * Szuka nicka w linii z mo≈ºliwo≈õciƒÖ 1-2 b≈Çƒôdnych znak√≥w
     */
    calculateFuzzyMatch(lineLower, nickLower) {
        // Szukaj pozycji gdzie nick mo≈ºe siƒô zaczynaƒá
        for (let i = 0; i <= lineLower.length - nickLower.length; i++) {
            const substring = lineLower.substring(i, i + nickLower.length);
            
            // Oblicz liczbƒô r√≥≈ºnych znak√≥w
            let differences = 0;
            for (let j = 0; j < nickLower.length; j++) {
                if (substring[j] !== nickLower[j]) {
                    differences++;
                }
            }
            
            // Je≈õli r√≥≈ºnica to maksymalnie 2 znaki dla nick√≥w 8+ znak√≥w
            // lub 1 znak dla nick√≥w 5-7 znak√≥w
            const maxDifferences = nickLower.length >= 8 ? 2 : 1;
            
            if (differences <= maxDifferences) {
                const similarity = 1 - (differences / nickLower.length);
                return Math.max(0.9, similarity); // Minimum 90% dla fuzzy match
            }
        }
        
        return 0; // Brak fuzzy match
    }

    /**
     * Oblicza podobie≈Ñstwo na podstawie kolejnych znak√≥w z nicku znalezionych w linii OCR
     * @param {string} ocrText - Tekst z OCR (bez znak√≥w specjalnych)
     * @param {string} nick - Nick do sprawdzenia (bez znak√≥w specjalnych)
     * @returns {number} Podobie≈Ñstwo 0-1
     */
    calculateOrderedSimilarity(ocrText, nick) {
        if (!nick || nick.length === 0) return 0;
        if (!ocrText || ocrText.length === 0) return 0;
        
        // Dla bardzo kr√≥tkich nick√≥w (1-2 znaki) wymagaj wy≈ºszego progu podobie≈Ñstwa
        if (nick.length <= 2) {
            // Dla kr√≥tkich nick√≥w wymagaj dok≈Çadnego dopasowania lub bardzo wysokiej jako≈õci
            const exactMatch = ocrText === nick;
            if (exactMatch) return 1.0;
            
            // W przeciwnym razie znacznie obni≈º podobie≈Ñstwo dla kr√≥tkich nick√≥w
            const baseSimilarity = this.calculateBasicOrderedSimilarity(ocrText, nick);
            return baseSimilarity * 0.3; // Drastyczne obni≈ºenie dla kr√≥tkich nick√≥w
        }
        
        return this.calculateBasicOrderedSimilarity(ocrText, nick);
    }
    
    calculateBasicOrderedSimilarity(ocrText, nick) {
        let matchedChars = 0;
        let ocrIndex = 0;
        
        // Przejd≈∫ przez ka≈ºdy znak w nicku i sprawd≈∫ czy wystƒôpuje w kolejno≈õci w OCR
        for (let nickIndex = 0; nickIndex < nick.length; nickIndex++) {
            const nickChar = nick[nickIndex];
            
            // Znajd≈∫ ten znak w OCR poczƒÖwszy od aktualnej pozycji
            let found = false;
            for (let i = ocrIndex; i < ocrText.length; i++) {
                if (ocrText[i] === nickChar) {
                    matchedChars++;
                    ocrIndex = i + 1; // Przesu≈Ñ siƒô za znaleziony znak
                    found = true;
                    break;
                }
            }
            
            // Je≈õli nie znaleziono znaku, kontynuuj (nie resetuj ocrIndex)
            if (!found) {
                // Mo≈ºna dodaƒá penalty za brak znaku, ale na razie kontynuujemy
            }
        }
        
        // Podstawowe podobie≈Ñstwo = znalezione znaki / ca≈Çkowita d≈Çugo≈õƒá nicku
        const baseSimilarity = matchedChars / nick.length;
        
        // Oblicz karƒô za r√≥≈ºnicƒô w d≈Çugo≈õci (proporcjonalny system)
        const lengthDifference = Math.abs(ocrText.length - nick.length);
        const maxLength = Math.max(ocrText.length, nick.length);
        const lengthDifferencePercent = maxLength > 0 ? lengthDifference / maxLength : 0;
        
        // Proporcjonalna kara: je≈õli r√≥≈ºnica 50% = dziel przez 2, 25% = dziel przez 1.5, itd.
        // Wz√≥r: dzielnik = 1 + (procent r√≥≈ºnicy)
        const lengthPenaltyDivisor = 1 + lengthDifferencePercent;
        const finalSimilarity = baseSimilarity / lengthPenaltyDivisor;
        
        return Math.max(0, finalSimilarity);
    }

    analyzeLineEnd(line, nickName = null) {
        const trimmedLine = line.trim();
        const words = trimmedLine.split(/\s+/);
        
        let searchText = trimmedLine;
        
        // Je≈õli mamy nick, szukaj tylko za nickiem
        if (nickName) {
            const nickIndex = trimmedLine.toLowerCase().indexOf(nickName.toLowerCase());
            if (nickIndex !== -1) {
                // Tekst za nickiem
                searchText = trimmedLine.substring(nickIndex + nickName.length).trim();
                if (searchText.length === 0) {
                    return { type: 'unknown', value: 'brak tekstu za nickiem' };
                }
                
                // NOWA WALIDACJA: Sprawd≈∫ czy "tekst za nickiem" nie jest czƒô≈õciƒÖ samego nicka
                // To siƒô dzieje gdy OCR b≈Çƒôdnie rozpoznaje nick lub gdy mamy czƒô≈õciowe dopasowanie
                const originalLine = trimmedLine.toLowerCase();
                const nickLower = nickName.toLowerCase();
                const searchTextLower = searchText.toLowerCase();
                
                // Je≈õli ca≈ÇƒÖ liniƒô mo≈ºna interpretowaƒá jako ciƒÖg≈Çy tekst (nick+ko≈Ñc√≥wka)
                // i nie ma wyra≈∫nego separatora (spacja, przecinek, etc.) miƒôdzy nickiem a tekstem
                if (searchTextLower.length <= 3 && 
                    !searchText.match(/^\s/) && // nie zaczyna siƒô od spacji
                    !searchText.match(/^[,.\-_|]/) && // nie zaczyna siƒô od separatora
                    originalLine === (nickLower + searchTextLower)) { // ca≈Ça linia to nick+ko≈Ñc√≥wka
                    
                    // Sprawd≈∫ czy to mo≈ºe byƒá b≈Çƒôdne rozpoznanie nicka jako nick+wynik
                    // Przyk≈Çad: "boisz" rozpoznane jako "Boqus" + "z"
                    return { type: 'unknown', value: `mo≈ºliwa czƒô≈õƒá nicka: "${searchText}"` };
                }
            }
        }
        
        const searchWords = searchText.split(/\s+/);
        const lastWord = searchWords[searchWords.length - 1];
        
        // Sprawd≈∫ wzorce zera w tek≈õcie za nickiem
        if (this.isZeroPattern(lastWord)) {
            return { type: 'zero', value: lastWord };
        }
        
        // Sprawd≈∫ czy w tek≈õcie za nickiem sƒÖ liczby 2+ cyfrowe
        const numberMatches = searchText.match(/\d{2,}/g);
        if (numberMatches && numberMatches.length > 0) {
            // Znajd≈∫ ostatniƒÖ liczbƒô 2+ cyfrowƒÖ za nickiem
            const lastNumber = numberMatches[numberMatches.length - 1];
            return { type: 'negative', value: lastNumber };
        }
        
        // Sprawd≈∫ czy to mo≈ºe byƒá wzorzec zera w tek≈õcie za nickiem
        for (const word of searchWords) {
            if (this.isZeroPattern(word)) {
                return { type: 'zero', value: word };
            }
        }
        
        return { type: 'unknown', value: lastWord };
    }

    isZeroPattern(word) {
        // Wszystkie wzorce zera z wcze≈õniejszych rozm√≥w
        const zeroPatterns = [
            // Czyste cyfry
            /^0$/,                    // czyste 0
            /^1$/,                    // czyste 1
            /^9$/,                    // czyste 9
            /^o$/,                    // czyste o
            /^e$/,                    // czyste e (b≈ÇƒÖd OCR)
            
            // W nawiasach okrƒÖg≈Çych
            /^\(0\)$/,               // (0)
            /^\(1\)$/,               // (1)
            /^\(9\)$/,               // (9)
            /^\(o\)$/,               // (o)
            /^\(e\)$/,               // (e) - b≈ÇƒÖd OCR
            
            // W nawiasach kwadratowych
            /^\[0\]$/,               // [0]
            /^\[1\]$/,               // [1]
            /^\[9\]$/,               // [9]
            /^\[o\]$/,               // [o]
            /^\[e\]$/,               // [e] - b≈ÇƒÖd OCR
            
            // Z nawiasem na ko≈Ñcu
            /^0\)$/,                 // 0)
            /^1\)$/,                 // 1)
            /^9\)$/,                 // 9)
            /^o\)$/,                 // o)
            /^e\)$/,                 // e) - b≈ÇƒÖd OCR
            
            // Z otwartym nawiasem okrƒÖg≈Çym na poczƒÖtku
            /^\(0$/,                 // (0
            /^\(1$/,                 // (1
            /^\(9$/,                 // (9
            /^\(o$/,                 // (o
            /^\(e$/,                 // (e - b≈ÇƒÖd OCR
            
            // Z otwartym nawiasem kwadratowym na poczƒÖtku
            /^\[0$/,                 // [0
            /^\[1$/,                 // [1
            /^\[9$/,                 // [9
            /^\[o$/,                 // [o
            /^\[e$/,                 // [e - b≈ÇƒÖd OCR
            
            // Z zamkniƒôtym nawiasem kwadratowym na ko≈Ñcu
            /^0\]$/,                 // 0]
            /^1\]$/,                 // 1]
            /^9\]$/,                 // 9]
            /^o\]$/,                 // o]
            /^e\]$/,                 // e] - b≈ÇƒÖd OCR
            
            // Dodatkowe wzorce
            /^zo$/,                  // zo
            /^ze$/                   // ze - b≈ÇƒÖd OCR
        ];
        
        const wordLower = word.toLowerCase();
        
        // Sprawd≈∫ czy po "o" nie ma dw√≥ch liter lub cyfr (dla wzorc√≥w zaczynajƒÖcych siƒô od "o")
        if (wordLower.startsWith('o') && wordLower.length >= 3) {
            const afterO = wordLower.substring(1);
            if (/^[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª0-9]{2,}/.test(afterO)) {
                return false;
            }
        }
        
        // Sprawd≈∫ czy po "o" nie ma spacji i dw√≥ch liter/cyfr
        const spaceAndTwoCharPattern = /o\s[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª0-9]{2,}/;
        if (spaceAndTwoCharPattern.test(wordLower)) {
            return false;
        }
        
        for (const pattern of zeroPatterns) {
            if (pattern.test(wordLower)) {
                return true;
            }
        }
        
        return false;
    }

    async cleanupTempFiles() {
        try {
            const files = await fs.readdir(this.tempDir);

            for (const file of files) {
                const filePath = path.join(this.tempDir, file);
                const stats = await fs.stat(filePath);

                const ageInHours = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60);

                if (ageInHours > 1) {
                    await fs.unlink(filePath);
                    logger.info(`[OCR] üóëÔ∏è Usuniƒôto stary plik tymczasowy: ${file}`);
                }
            }
        } catch (error) {
            logger.error('[OCR] ‚ùå B≈ÇƒÖd czyszczenia plik√≥w tymczasowych:', error);
        }
    }

    /**
     * WyciƒÖga wszystkich graczy z ich wynikami (nie tylko z zerem)
     * U≈ºywane dla komendy /faza1
     */
    async extractAllPlayersWithScores(text, guild = null, requestingMember = null) {
        try {
            logger.info('[PHASE1] üéØ Rozpoczynam ekstrakcjƒô wszystkich graczy z wynikami...');

            if (!guild || !requestingMember) {
                logger.error('[PHASE1] ‚ùå Brak guild lub requestingMember - nie mo≈ºna kontynuowaƒá');
                return [];
            }

            // Pobierz nicki z odpowiedniej roli
            const roleNicks = await this.getRoleNicks(guild, requestingMember);
            if (roleNicks.length === 0) {
                logger.info('[PHASE1] ‚ùå Brak nick√≥w z odpowiedniej roli');
                return [];
            }

            logger.info(`[PHASE1] üë• Znaleziono ${roleNicks.length} nick√≥w z roli`);

            // Przygotuj linie OCR
            const lines = text.split('\n').filter(line => line.trim().length > 0);
            const validLines = lines.filter(line => line.trim().length >= 5);

            logger.info(`[PHASE1] üìã Analizujƒô ${validLines.length}/${lines.length} linii`);

            const playersWithScores = [];
            const processedNicks = new Set();

            // Dla ka≈ºdej linii znajd≈∫ najlepiej dopasowany nick z roli
            for (let i = 0; i < validLines.length; i++) {
                const line = validLines[i];

                // Znajd≈∫ najlepsze dopasowanie ze wszystkich nick√≥w z roli
                let bestMatch = null;
                let bestSimilarity = 0;

                for (const roleNick of roleNicks) {
                    const similarity = this.calculateLineSimilarity(line, roleNick.displayName);

                    let requiredSimilarity = 0.6;
                    if (roleNick.displayName.length <= 5) {
                        requiredSimilarity = 0.75;
                    } else if (roleNick.displayName.length <= 8) {
                        requiredSimilarity = 0.7;
                    }

                    if (similarity >= requiredSimilarity &&
                        (similarity > bestSimilarity ||
                         (similarity === bestSimilarity && roleNick.displayName.length > (bestMatch?.displayName?.length || 0)))) {
                        bestSimilarity = similarity;
                        bestMatch = roleNick;
                    }
                }

                if (bestMatch) {
                    // Sprawd≈∫ czy ju≈º przetworzyli≈õmy tego gracza
                    if (processedNicks.has(bestMatch.displayName)) {
                        continue;
                    }

                    // WyciƒÖgnij wynik z ko≈Ñca linii
                    const endResult = this.analyzeLineEnd(line, bestMatch.displayName);

                    // Je≈õli nick ma 10+ liter i nie znaleziono wyniku w tej linii, sprawd≈∫ nastƒôpnƒÖ
                    let finalScore = null;

                    if (bestMatch.displayName.length >= 10 && endResult.type === 'unknown') {
                        const currentLineText = line.trim();
                        const allLines = text.split('\n').filter(line => line.trim().length > 0);
                        const currentLineIndex = allLines.findIndex(l => l.trim() === currentLineText);

                        if (currentLineIndex !== -1 && currentLineIndex + 1 < allLines.length) {
                            const nextLine = allLines[currentLineIndex + 1];
                            const nextEndResult = this.analyzeLineEnd(nextLine, null);

                            if (nextEndResult.type === 'zero') {
                                finalScore = 0;
                            } else if (nextEndResult.type === 'negative') {
                                finalScore = parseInt(nextEndResult.value) || 0;
                            }
                        }
                    } else {
                        // Wynik w tej samej linii
                        if (endResult.type === 'zero') {
                            finalScore = 0;
                        } else if (endResult.type === 'negative') {
                            finalScore = parseInt(endResult.value) || 0;
                        } else if (endResult.type === 'unknown') {
                            // Spr√≥buj wyciƒÖgnƒÖƒá liczbƒô z warto≈õci
                            const numberMatch = endResult.value.match(/\d+/);
                            if (numberMatch) {
                                finalScore = parseInt(numberMatch[0]) || 0;
                            }
                        }
                    }

                    // Tylko je≈õli uda≈Ço siƒô wyciƒÖgnƒÖƒá wynik
                    if (finalScore !== null) {
                        processedNicks.add(bestMatch.displayName);

                        playersWithScores.push({
                            nick: bestMatch.displayName,
                            score: finalScore
                        });

                        logger.info(`[PHASE1] ‚úÖ "${bestMatch.displayName}" ‚Üí ${finalScore} punkt√≥w`);
                    }
                }
            }

            logger.info(`[PHASE1] üìä Znaleziono ${playersWithScores.length} graczy z wynikami`);
            return playersWithScores;

        } catch (error) {
            logger.error('[PHASE1] ‚ùå B≈ÇƒÖd ekstrakcji graczy z wynikami:', error);
            return [];
        }
    }

}

module.exports = OCRService;