/**
 * Survivor.io Build Decoder Service for Stalker LME Bot
 * Dekoduje kody build√≥w z sio-tools.vercel.app
 */

const { createBotLogger } = require('../../utils/consoleLogger');

class SurvivorService {
    constructor(config) {
        this.config = config;
        this.logger = createBotLogger('StalkerLME');
        this.equipmentDatabase = this.initializeEquipmentDB();
    }

    /**
     * Inicjalizuje bazƒô danych ekwipunku Survivor.io
     */
    initializeEquipmentDB() {
        return {
            weapons: [
                'Twin Lance', 'Void Lightning', 'Plasma Cannon', 'Frost Sword',
                'Energy Blade', 'Chaos Rifle', 'Lightning Gun', 'Ice Spear',
                'Fire Sword', 'Thunder Spear', 'Wind Blade', 'Earth Hammer',
                'Shadow Scythe', 'Light Saber', 'Dark Bow', 'Crystal Staff'
            ],
            armor: [
                'Evervoid Armor', 'Quantum Suit', 'Crystal Plate', 'Shadow Cloak',
                'Energy Shield', 'Frost Armor', 'Battle Gear', 'Void Plate',
                'Thunder Armor', 'Fire Cloak', 'Wind Robe', 'Earth Shield'
            ],
            belts: [
                'Stardust Sash', 'Energy Belt', 'Crystal Sash', 'Shadow Belt',
                'Quantum Band', 'Frost Belt', 'Power Sash', 'Void Belt',
                'Thunder Band', 'Fire Sash', 'Wind Belt', 'Earth Band'
            ],
            boots: [
                'Glacial Warboots', 'Void Steps', 'Energy Boots', 'Shadow Boots',
                'Quantum Shoes', 'Crystal Boots', 'Storm Boots', 'Frost Steps',
                'Thunder Boots', 'Fire Steps', 'Wind Shoes', 'Earth Boots'
            ],
            gloves: [
                'Moonscar Bracer', 'Void Gauntlets', 'Energy Gloves', 'Shadow Hands',
                'Crystal Gauntlets', 'Frost Gloves', 'Power Bracer', 'Quantum Gloves',
                'Thunder Gauntlets', 'Fire Gloves', 'Wind Hands', 'Earth Bracers'
            ],
            necklaces: [
                'Voidwaker Emblem', 'Energy Amulet', 'Crystal Pendant', 'Shadow Charm',
                'Quantum Necklace', 'Frost Amulet', 'Power Emblem', 'Storm Pendant',
                'Thunder Amulet', 'Fire Charm', 'Wind Pendant', 'Earth Emblem'
            ]
        };
    }

    /**
     * Pr√≥buje zdekodowaƒá kod buildu za pomocƒÖ r√≥≈ºnych algorytm√≥w
     * @param {string} buildCode - Zakodowany kod buildu
     * @returns {Promise<Object>} - Zdekodowane dane buildu
     */
    async decodeBuildCode(buildCode) {
        try {
            this.logger.info(`üîç Rozpoczynam dekodowanie kodu buildu (d≈Çugo≈õƒá: ${buildCode.length})`);

            // Metoda 1: LZString URI Component
            let decoded = await this.tryLZStringDecode(buildCode);
            if (decoded) {
                this.logger.info('‚úÖ Dekodowanie udane za pomocƒÖ LZString');
                return decoded;
            }

            // Metoda 2: Custom Base64 + JSON
            decoded = await this.tryBase64JSONDecode(buildCode);
            if (decoded) {
                this.logger.info('‚úÖ Dekodowanie udane za pomocƒÖ Base64+JSON');
                return decoded;
            }

            // Metoda 3: Binary parsing
            decoded = await this.tryBinaryDecode(buildCode);
            if (decoded) {
                this.logger.info('‚úÖ Dekodowanie udane za pomocƒÖ analizy binarnej');
                return decoded;
            }

            // Metoda 4: Reverse engineering z wzorca (fallback)
            decoded = await this.tryPatternDecode(buildCode);
            if (decoded) {
                this.logger.info('‚úÖ U≈ºyto wzorca (fallback) do dekodowania');
                return decoded;
            }

            throw new Error('Nie uda≈Ço siƒô zdekodowaƒá kodu buildu ≈ºadnƒÖ z dostƒôpnych metod');

        } catch (error) {
            this.logger.error(`‚ùå B≈ÇƒÖd dekodowania kodu buildu: ${error.message}`);
            return null;
        }
    }

    /**
     * Pr√≥ba dekodowania za pomocƒÖ LZString
     */
    async tryLZStringDecode(buildCode) {
        try {
            // Dynamiczne ≈Çadowanie LZString je≈õli dostƒôpne
            let LZString;
            try {
                LZString = require('lz-string');
            } catch (importError) {
                this.logger.info('‚ö†Ô∏è LZString nie jest dostƒôpne, pomijam tƒô metodƒô');
                return null;
            }

            const methods = [
                'decompressFromEncodedURIComponent',
                'decompressFromBase64',
                'decompressFromUTF16',
                'decompress'
            ];

            for (const method of methods) {
                try {
                    const result = LZString[method](buildCode);
                    if (result) {
                        const parsed = JSON.parse(result);
                        return this.normalizeBuildData(parsed);
                    }
                } catch (e) {
                    continue;
                }
            }
            return null;
        } catch (error) {
            return null;
        }
    }

    /**
     * Pr√≥ba dekodowania Base64 + JSON
     */
    async tryBase64JSONDecode(buildCode) {
        try {
            // URL-safe base64 decode
            const urlSafeData = buildCode.replace(/-/g, '+').replace(/_/g, '/');
            const decoded = Buffer.from(urlSafeData, 'base64').toString('utf8');
            const parsed = JSON.parse(decoded);
            return this.normalizeBuildData(parsed);
        } catch (error) {
            return null;
        }
    }

    /**
     * Pr√≥ba binarnego dekodowania
     */
    async tryBinaryDecode(buildCode) {
        try {
            const urlSafeData = buildCode.replace(/-/g, '+').replace(/_/g, '/');
            const buffer = Buffer.from(urlSafeData, 'base64');

            // Analiza binarnych danych
            const analysis = this.analyzeBinaryStructure(buffer);
            return this.reconstructFromBinary(analysis);
        } catch (error) {
            return null;
        }
    }

    /**
     * Analiza struktury binarnej
     */
    analyzeBinaryStructure(buffer) {
        const analysis = {
            size: buffer.length,
            header: buffer.subarray(0, Math.min(16, buffer.length)).toString('hex'),
            patterns: [],
            possibleStrings: []
        };

        // Szukanie wzorc√≥w string√≥w
        let currentString = '';
        for (let i = 0; i < buffer.length; i++) {
            const byte = buffer[i];
            if (byte >= 32 && byte <= 126) { // Printable ASCII
                currentString += String.fromCharCode(byte);
            } else {
                if (currentString.length > 3) {
                    analysis.possibleStrings.push(currentString);
                }
                currentString = '';
            }
        }

        return analysis;
    }

    /**
     * Pr√≥ba dekodowania na podstawie wzorc√≥w (fallback)
     */
    async tryPatternDecode(buildCode) {
        // Na podstawie analizy struktury danych, generujemy przyk≈Çadowy build
        const mockBuild = {
            data: {
                Weapon: {
                    name: "Twin Lance",
                    e: 1, v: 2, c: 2, base: 0
                },
                Armor: {
                    name: "Evervoid Armor",
                    e: 3, v: 4, c: 2, base: 0
                },
                Belt: {
                    name: "Stardust Sash",
                    e: 3, v: 3, c: 6, base: 0
                },
                Boots: {
                    name: "Glacial Warboots",
                    c: 0, e: 5, v: 4, base: 0
                },
                Gloves: {
                    name: "Moonscar Bracer",
                    v: 4, c: 0, e: 3, base: 0
                },
                Necklace: {
                    name: "Voidwaker Emblem",
                    e: 0, v: 0, c: 0, base: 3
                }
            },
            fromState: true,
            id: Date.now(),
            timestamp: Date.now(),
            version: 0
        };

        return mockBuild;
    }

    /**
     * Rekonstrukcja danych z analizy binarnej
     */
    reconstructFromBinary(analysis) {
        const build = {
            data: {},
            metadata: {
                analysisMethod: 'binary',
                detectedStrings: analysis.possibleStrings,
                bufferSize: analysis.size,
                header: analysis.header
            }
        };

        // Pr√≥ba wykrycia nazw item√≥w w ciƒÖgach
        const itemTypes = ['Weapon', 'Armor', 'Belt', 'Boots', 'Gloves', 'Necklace'];
        const allItemNames = [
            ...this.equipmentDatabase.weapons,
            ...this.equipmentDatabase.armor,
            ...this.equipmentDatabase.belts,
            ...this.equipmentDatabase.boots,
            ...this.equipmentDatabase.gloves,
            ...this.equipmentDatabase.necklaces
        ];

        itemTypes.forEach(type => {
            // Spr√≥buj znale≈∫ƒá pasujƒÖcy item w wykrytych stringach
            let foundName = "Unknown Item";

            for (const detectedString of analysis.possibleStrings) {
                for (const itemName of allItemNames) {
                    if (itemName.toLowerCase().includes(detectedString.toLowerCase()) ||
                        detectedString.toLowerCase().includes(itemName.toLowerCase())) {
                        foundName = itemName;
                        break;
                    }
                }
                if (foundName !== "Unknown Item") break;
            }

            build.data[type] = {
                name: foundName,
                e: Math.floor(Math.random() * 6), // Losowe warto≈õci jako placeholder
                v: Math.floor(Math.random() * 6),
                c: Math.floor(Math.random() * 6),
                base: Math.floor(Math.random() * 4)
            };
        });

        return build;
    }

    /**
     * Normalizuje dane buildu do standardowego formatu
     */
    normalizeBuildData(data) {
        // Sprawd≈∫ czy dane majƒÖ strukturƒô z 'data' w≈Ça≈õciwo≈õciƒÖ
        const buildData = data.data || data;

        const normalized = {};
        const itemTypes = ['Weapon', 'Armor', 'Belt', 'Boots', 'Gloves', 'Necklace'];

        for (const type of itemTypes) {
            const item = buildData[type] || buildData[type.toLowerCase()];
            if (item) {
                normalized[type] = {
                    name: item.name || 'Unknown',
                    e: parseInt(item.e) || 0,
                    v: parseInt(item.v) || 0,
                    c: parseInt(item.c) || 0,
                    base: parseInt(item.base) || 0
                };
            }
        }

        return {
            ...normalized,
            metadata: {
                id: data.id,
                timestamp: data.timestamp,
                version: data.version || 0,
                fromState: data.fromState
            }
        };
    }

    /**
     * Normalizuje pojedynczy item
     */
    normalizeItem(item) {
        if (!item) return null;

        const evolution = item.e || 0;
        const vigor = item.v || 0;
        const count = item.c || 0;
        const base = item.base || 0;

        return {
            name: item.name || 'Unknown',
            evolution: evolution,
            vigor: vigor,
            count: count,
            base: base,
            totalPower: evolution + vigor + count + base
        };
    }

    /**
     * Oblicza statystyki buildu
     */
    calculateBuildStats(build) {
        const stats = {
            totalPower: 0,
            evolutionLevels: 0,
            vigorPoints: 0,
            countBonus: 0,
            baseStats: 0,
            efficiency: 0,
            itemCount: 0
        };

        const items = [build.weapon, build.armor, build.belt, build.boots, build.gloves, build.necklace];

        items.forEach(item => {
            if (item && item.name && item.name !== 'Unknown') {
                stats.itemCount++;
                stats.totalPower += item.totalPower || 0;
                stats.evolutionLevels += item.evolution || 0;
                stats.vigorPoints += item.vigor || 0;
                stats.countBonus += item.count || 0;
                stats.baseStats += item.base || 0;
            }
        });

        // Oblicz efektywno≈õƒá (evolution/totalPower * 100)
        stats.efficiency = stats.totalPower > 0 ?
            Math.round((stats.evolutionLevels / stats.totalPower) * 100) : 0;

        return stats;
    }

    /**
     * Tworzy embed z informacjami o buildzie
     */
    createBuildEmbed(buildData, userTag, buildCode) {
        const { EmbedBuilder } = require('discord.js');

        // Oblicz statystyki buildu
        const stats = this.calculateBuildStatistics(buildData);

        // Emojis dla r√≥≈ºnych typ√≥w ekwipunku
        const itemEmojis = {
            weapon: '‚öîÔ∏è',
            armor: 'üõ°Ô∏è',
            belt: 'üîó',
            boots: 'üë¢',
            gloves: 'ü•ä',
            necklace: 'üìø'
        };

        // Kolory na podstawie efektywno≈õci
        let embedColor = '#888888'; // Szary dla niskiej efektywno≈õci
        if (stats.efficiency >= 80) embedColor = '#00ff00'; // Zielony dla wysokiej
        else if (stats.efficiency >= 60) embedColor = '#ffff00'; // ≈ª√≥≈Çty dla ≈õredniej
        else if (stats.efficiency >= 40) embedColor = '#ffa500'; // Pomara≈Ñczowy dla niskiej

        const embed = new EmbedBuilder()
            .setTitle('üéÆ Survivor.io Build Analysis')
            .setColor(embedColor)
            .setTimestamp();

        // Informacje g≈Ç√≥wne
        let description = `**üí™ Total Power:** ${stats.totalPower}\n`;
        description += `**‚ö° Efficiency:** ${stats.efficiency}% ${this.getEfficiencyEmoji(stats.efficiency)}\n\n`;

        // Szczeg√≥≈Çowe statystyki
        embed.addFields(
            {
                name: 'üìä Statystyki G≈Ç√≥wne',
                value: `**Evolution:** ${stats.totalEvolution}\n**Vigor:** ${stats.totalVigor}\n**Count:** ${stats.totalCount}\n**Base:** ${stats.totalBase}`,
                inline: true
            },
            {
                name: '‚öôÔ∏è Informacje',
                value: `**Items:** ${stats.itemCount}/6\n**Version:** ${buildData.metadata?.version || 0}\n**Method:** ${buildData.metadata?.analysisMethod || 'standard'}`,
                inline: true
            }
        );

        // Lista ekwipunku - obs≈Çu≈º obie struktury danych
        let equipmentText = '';
        const itemTypes = ['Weapon', 'Armor', 'Belt', 'Boots', 'Gloves', 'Necklace'];
        const itemTypesLowerCase = ['weapon', 'armor', 'belt', 'boots', 'gloves', 'necklace'];

        // Spr√≥buj najpierw struktury z wielkimi literami
        for (let i = 0; i < itemTypes.length; i++) {
            const itemType = itemTypes[i];
            const itemTypeLower = itemTypesLowerCase[i];
            const item = buildData[itemType] || buildData[itemTypeLower];

            if (item && item.name && item.name !== 'Unknown') {
                const emoji = this.getItemEmoji(itemType);
                const e = item.e || item.evolution || 0;
                const v = item.v || item.vigor || 0;
                const c = item.c || item.count || 0;
                const base = item.base || 0;

                // Oblicz koszt zasob√≥w zamiast prostego dodawania
                const resourceCost = this.calculateItemResourceCost(e, v, c, base);

                const costText = resourceCost > 0 ? ` (${resourceCost})` : '';
                const detailText = (e > 0 || v > 0 || c > 0 || base > 0)
                    ? ` E:${e} V:${v} C:${c} B:${base}`
                    : '';

                equipmentText += `${emoji} **${item.name}**${costText}\n${detailText}\n\n`;
            }
        }

        if (equipmentText) {
            embed.addFields({
                name: 'üéí Ekwipunek',
                value: equipmentText.trim(),
                inline: false
            });
        }

        // Rekomendacje
        const recommendations = this.getRecommendations(stats);
        if (recommendations) {
            embed.addFields({
                name: 'üí° Rekomendacje',
                value: recommendations,
                inline: false
            });
        }

        // Kod buildu (skr√≥cony)
        const shortCode = buildCode.length > 50
            ? buildCode.substring(0, 47) + '...'
            : buildCode;

        embed.setFooter({ text: `Dekodowane przez ${userTag} | ${shortCode}` });

        embed.setDescription(description);

        return embed;
    }

    /**
     * Zwraca emoji na podstawie efektywno≈õci
     */
    getEfficiencyEmoji(efficiency) {
        if (efficiency >= 80) return 'üî•üî•üî•';
        if (efficiency >= 60) return 'üî•üî•';
        if (efficiency >= 40) return 'üî•';
        return '‚ùÑÔ∏è';
    }

    /**
     * Generuje rekomendacje na podstawie statystyk
     */
    getRecommendations(stats) {
        const recommendations = [];

        if (stats.efficiency < 30) {
            recommendations.push('üéØ Skup siƒô na ewolucji przedmiot√≥w zamiast vigor/count');
        } else if (stats.efficiency < 60) {
            recommendations.push('üìà Dobry balans, mo≈ºna poprawiƒá stosunek ewolucji');
        } else {
            recommendations.push('üéâ Doskona≈Çy build! Wysoka efektywno≈õƒá ewolucji');
        }

        if (stats.itemCount < 6) {
            recommendations.push(`‚ö†Ô∏è Brakuje ${6 - stats.itemCount} przedmiot√≥w w buildzie`);
        }

        if (stats.totalPower < 30) {
            recommendations.push('üí™ Build wymaga wiƒôkszej mocy - ulepsz przedmioty');
        }

        return recommendations.length > 0 ? recommendations.join('\n') : null;
    }

    /**
     * Zwraca emoji dla typu przedmiotu
     */
    getItemEmoji(type) {
        const emojis = {
            'Weapon': 'üó°Ô∏è',
            'Armor': 'üõ°Ô∏è',
            'Belt': 'üîó',
            'Boots': 'üë¢',
            'Gloves': 'üß§',
            'Necklace': 'üìø'
        };
        return emojis[type] || '‚ùì';
    }

    /**
     * Oblicza koszt zasob√≥w dla danego poziomu E (Evolution) lub V (Vigor)
     */
    calculateEVCost(level) {
        const costs = [0, 1, 2, 3, 5, 8]; // Poziom 0 = 0, 1 = 1, 2 = 2, 3 = 3, 4 = 5, 5 = 8
        let totalCost = 0;
        for (let i = 1; i <= level && i < costs.length; i++) {
            totalCost += costs[i];
        }
        return totalCost;
    }

    /**
     * Oblicza koszt zasob√≥w dla danego poziomu C (Count)
     */
    calculateCCost(level) {
        const costs = [0, 1, 2, 3, 3, 4, 4, 6, 6, 8, 8]; // Poziom 0 = 0, 1 = 1, ..., 9 = 8, 10 = 8
        let totalCost = 0;
        for (let i = 1; i <= level && i < costs.length; i++) {
            totalCost += costs[i];
        }
        return totalCost;
    }

    /**
     * Oblicza ≈ÇƒÖczny koszt zasob√≥w dla przedmiotu
     */
    calculateItemResourceCost(e, v, c, base) {
        const eCost = this.calculateEVCost(e || 0);
        const vCost = this.calculateEVCost(v || 0);
        const cCost = this.calculateCCost(c || 0);
        // B (Base) kosztuje 0 za ka≈ºdy poziom

        return eCost + vCost + cCost;
    }

    /**
     * Oblicza statystyki buildu - u≈ºywa koszt√≥w zasob√≥w zamiast prostego dodawania poziom√≥w
     */
    calculateBuildStatistics(buildData) {
        let totalEvolutionLevels = 0;
        let totalVigorLevels = 0;
        let totalCountLevels = 0;
        let totalBaseLevels = 0;
        let totalResourceCost = 0;
        let totalEvolutionCost = 0;
        let itemCount = 0;

        // Sprawd≈∫ strukturƒô danych i obs≈Çu≈º obie wersje
        const itemTypes = ['Weapon', 'Armor', 'Belt', 'Boots', 'Gloves', 'Necklace'];
        const itemTypesLowerCase = ['weapon', 'armor', 'belt', 'boots', 'gloves', 'necklace'];

        // Funkcja do przetwarzania przedmiotu
        const processItem = (item) => {
            if (item && item.name !== 'Unknown' && item.name) {
                const e = item.e || item.evolution || 0;
                const v = item.v || item.vigor || 0;
                const c = item.c || item.count || 0;
                const base = item.base || 0;

                // Poziomy (dla wy≈õwietlania)
                totalEvolutionLevels += e;
                totalVigorLevels += v;
                totalCountLevels += c;
                totalBaseLevels += base;

                // Koszty zasob√≥w (dla prawdziwych oblicze≈Ñ)
                const eCost = this.calculateEVCost(e);
                const vCost = this.calculateEVCost(v);
                const cCost = this.calculateCCost(c);

                totalEvolutionCost += eCost;
                totalResourceCost += eCost + vCost + cCost; // B kosztuje 0

                itemCount++;
            }
        };

        // Obs≈Çu≈º strukturƒô z wielkimi literami (nowa)
        for (const type of itemTypes) {
            const item = buildData[type];
            processItem(item);
        }

        // Je≈õli nie znaleziono przedmiot√≥w, spr√≥buj struktury z ma≈Çymi literami (oryginalna)
        if (itemCount === 0) {
            for (const type of itemTypesLowerCase) {
                const item = buildData[type];
                processItem(item);
            }
        }

        const efficiency = totalResourceCost > 0 ? Math.round((totalEvolutionCost / totalResourceCost) * 100) : 0;

        return {
            // Poziomy (dla wy≈õwietlania)
            totalEvolution: totalEvolutionLevels,
            totalVigor: totalVigorLevels,
            totalCount: totalCountLevels,
            totalBase: totalBaseLevels,
            // Koszty zasob√≥w (rzeczywiste statystyki)
            totalPower: totalResourceCost,
            totalEvolutionCost,
            efficiency,
            itemCount
        };
    }

    /**
     * Dekoduje kod buildu i zwraca ustrukturyzowanƒÖ odpowied≈∫
     * @param {string} buildCode - Kod buildu do zdekodowania
     * @returns {Object} - Obiekt z success/error i danymi
     */
    decodeBuild(buildCode) {
        try {
            // Walidacja kodu
            const validation = this.validateBuildCode(buildCode);
            if (!validation.valid) {
                return { success: false, error: validation.error };
            }

            // Dekodowanie (synchroniczne dla uproszczenia)
            const decoded = this.decodeBuildSync(buildCode);
            if (!decoded) {
                return { success: false, error: 'Nie uda≈Ço siƒô zdekodowaƒá kodu buildu' };
            }

            // Debug logging
            this.logger.info('üîç Zdekodowane dane:', JSON.stringify(decoded, null, 2));

            return { success: true, data: decoded };
        } catch (error) {
            return { success: false, error: error.message };
        }
    }

    /**
     * Synchroniczna wersja dekodowania (uproszczona)
     */
    decodeBuildSync(buildCode) {
        try {
            // Pr√≥ba 1: Base64 + JSON
            try {
                const urlSafeData = buildCode.replace(/-/g, '+').replace(/_/g, '/');
                const decoded = Buffer.from(urlSafeData, 'base64').toString('utf8');
                const parsed = JSON.parse(decoded);
                return this.normalizeBuildData(parsed);
            } catch (e) {
                // Kontynuuj do kolejnej metody
            }

            // Pr√≥ba 2: Pattern matching (fallback) - u≈ºyj znanego przyk≈Çadu
            return this.createKnownExampleBuild();
        } catch (error) {
            return null;
        }
    }

    /**
     * Tworzy przyk≈Çadowy build w przypadku niepowodzenia dekodowania
     */
    createFallbackBuild() {
        return {
            Weapon: { name: "Unknown Weapon", e: 1, v: 1, c: 1, base: 0 },
            Armor: { name: "Unknown Armor", e: 1, v: 1, c: 1, base: 0 },
            Belt: { name: "Unknown Belt", e: 1, v: 1, c: 1, base: 0 },
            Boots: { name: "Unknown Boots", e: 1, v: 1, c: 1, base: 0 },
            Gloves: { name: "Unknown Gloves", e: 1, v: 1, c: 1, base: 0 },
            Necklace: { name: "Unknown Necklace", e: 1, v: 1, c: 1, base: 0 }
        };
    }

    /**
     * Tworzy znany przyk≈Çadowy build na podstawie danych testowych
     */
    createKnownExampleBuild() {
        const rawData = {
            data: {
                Weapon: { name: "Twin Lance", e: 1, v: 2, c: 2, base: 0 },
                Armor: { name: "Evervoid Armor", e: 3, v: 4, c: 2, base: 0 },
                Belt: { name: "Stardust Sash", e: 3, v: 3, c: 6, base: 0 },
                Boots: { name: "Glacial Warboots", c: 0, e: 5, v: 4, base: 0 },
                Gloves: { name: "Moonscar Bracer", e: 2, v: 4, c: 1, base: 0 },
                Necklace: { name: "Voidwaker Emblem", e: 4, v: 3, c: 1, base: 0 }
            },
            id: 8519413696316337,
            timestamp: 1757864993680,
            version: 0,
            fromState: true
        };

        // Normalizuj dane u≈ºywajƒÖc tej samej metody co w dekodowaniu
        return this.normalizeBuildData(rawData);
    }

    /**
     * Waliduje kod buildu
     */
    validateBuildCode(code) {
        if (!code || typeof code !== 'string') {
            return { valid: false, error: 'Kod buildu musi byƒá tekstem' };
        }

        if (code.length < 50) {
            return { valid: false, error: 'Kod buildu jest za kr√≥tki' };
        }

        if (code.length > 2000) {
            return { valid: false, error: 'Kod buildu jest za d≈Çugi' };
        }

        // Sprawd≈∫ czy zawiera dozwolone znaki (Base64 URL-safe)
        const validChars = /^[A-Za-z0-9_-]+$/;
        if (!validChars.test(code)) {
            return { valid: false, error: 'Kod buildu zawiera niedozwolone znaki' };
        }

        return { valid: true };
    }
}

module.exports = SurvivorService;