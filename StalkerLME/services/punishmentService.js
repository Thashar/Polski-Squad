const { EmbedBuilder } = require('discord.js');

const { createBotLogger } = require('../../utils/consoleLogger');

const logger = createBotLogger('StalkerLME');
class PunishmentService {
    constructor(config, databaseService) {
        this.config = config;
        this.db = databaseService;
    }

    async processPunishments(guild, foundUsers) {
        try {
            logger.info('\nüíæ ==================== DODAWANIE PUNKT√ìW ====================');
            logger.info(`üè∞ Serwer: ${guild.name} (${guild.id})`);
            logger.info(`üë• Liczba u≈ºytkownik√≥w: ${foundUsers.length}`);
            
            const results = [];
            
            for (const userData of foundUsers) {
                const { userId, member, matchedName } = userData;
                
                logger.info(`\nüë§ Przetwarzanie: ${member.displayName} (${userId})`);
                const userPunishment = await this.db.addPunishmentPoints(guild.id, userId, 1, 'Niepokonanie bossa');
                
                logger.info(`üìä Nowa liczba punkt√≥w: ${userPunishment.points}`);
                
                const roleResult = await this.updateUserRoles(member, userPunishment.points);
                logger.info(`üé≠ ${roleResult}`);
                
                const warningResult = await this.sendWarningIfNeeded(guild, member, userPunishment.points);
                if (warningResult) {
                    logger.info(`üì¢ ${warningResult}`);
                }
                
                results.push({
                    user: member,
                    points: userPunishment.points,
                    matchedName: matchedName
                });
                
                logger.info(`‚úÖ Pomy≈õlnie zaktualizowano punkty dla ${member.displayName}`);
            }
            
            logger.info(`\n‚úÖ Zako≈Ñczono dodawanie punkt√≥w dla ${results.length} u≈ºytkownik√≥w`);
            return results;
        } catch (error) {
            logger.error('\nüí• ==================== B≈ÅƒÑD DODAWANIA PUNKT√ìW ====================');
            logger.error('‚ùå B≈ÇƒÖd przetwarzania kar:', error);
            throw error;
        }
    }

    async updateUserRoles(member, points) {
        try {
            logger.info(`\nüé≠ ==================== AKTUALIZACJA R√ìL ====================`);
            logger.info(`üë§ U≈ºytkownik: ${member.displayName} (${member.id})`);
            logger.info(`üìä Punkty: ${points}`);
            
            const punishmentRole = member.guild.roles.cache.get(this.config.punishmentRoleId);
            const lotteryBanRole = member.guild.roles.cache.get(this.config.lotteryBanRoleId);
            
            if (!punishmentRole) {
                return '‚ùå Nie znaleziono roli karania';
            }
            
            if (!lotteryBanRole) {
                return '‚ùå Nie znaleziono roli zakazu loterii';
            }
            
            const hasPunishmentRole = member.roles.cache.has(this.config.punishmentRoleId);
            const hasLotteryBanRole = member.roles.cache.has(this.config.lotteryBanRoleId);
            
            let messages = [];
            
            // Logika dla 5+ punkt√≥w (zakaz loterii)
            if (points >= this.config.pointLimits.lotteryBan) {
                logger.info('üö´ U≈ºytkownik ma 5+ punkt√≥w - stosowanie zakazu loterii');
                
                // Usu≈Ñ rolƒô karania (3+ punkt√≥w) je≈õli ma
                if (hasPunishmentRole) {
                    await member.roles.remove(punishmentRole);
                    messages.push(`‚ûñ Usuniƒôto rolƒô karania`);
                    logger.info('‚ûñ Usuniƒôto rolƒô karania (3+ punkt√≥w)');
                }
                
                // Dodaj rolƒô zakazu loterii (5+ punkt√≥w) je≈õli nie ma
                if (!hasLotteryBanRole) {
                    await member.roles.add(lotteryBanRole);
                    messages.push(`üö® Nadano rolƒô zakazu loterii`);
                    logger.info('üö® Nadano rolƒô zakazu loterii (5+ punkt√≥w)');
                } else {
                    logger.info('‚ÑπÔ∏è U≈ºytkownik ju≈º ma rolƒô zakazu loterii');
                }
                
            // Logika dla 3-4 punkt√≥w (tylko rola karania)
            } else if (points >= this.config.pointLimits.punishmentRole) {
                logger.info('‚ö†Ô∏è U≈ºytkownik ma 3-4 punkty - stosowanie roli karania');
                
                // Usu≈Ñ rolƒô zakazu loterii je≈õli ma
                if (hasLotteryBanRole) {
                    await member.roles.remove(lotteryBanRole);
                    messages.push(`‚ûñ Usuniƒôto rolƒô zakazu loterii`);
                    logger.info('‚ûñ Usuniƒôto rolƒô zakazu loterii');
                }
                
                // Dodaj rolƒô karania je≈õli nie ma
                if (!hasPunishmentRole) {
                    await member.roles.add(punishmentRole);
                    messages.push(`üé≠ Nadano rolƒô karania`);
                    logger.info('üé≠ Nadano rolƒô karania (3+ punkt√≥w)');
                } else {
                    logger.info('‚ÑπÔ∏è U≈ºytkownik ju≈º ma rolƒô karania');
                }
                
            // Logika dla 0-2 punkt√≥w (brak r√≥l karnych)
            } else {
                logger.info('‚úÖ U≈ºytkownik ma mniej ni≈º 3 punkty - usuwanie wszystkich r√≥l karnych');
                
                if (hasLotteryBanRole) {
                    await member.roles.remove(lotteryBanRole);
                    messages.push(`‚ûñ Usuniƒôto rolƒô zakazu loterii`);
                    logger.info('‚ûñ Usuniƒôto rolƒô zakazu loterii');
                }
                
                if (hasPunishmentRole) {
                    await member.roles.remove(punishmentRole);
                    messages.push(`‚ûñ Usuniƒôto rolƒô karania`);
                    logger.info('‚ûñ Usuniƒôto rolƒô karania');
                }
                
                if (!hasLotteryBanRole && !hasPunishmentRole) {
                    logger.info('‚ÑπÔ∏è U≈ºytkownik nie ma r√≥l karnych');
                }
            }
            
            const result = messages.length > 0 ? messages.join(', ') : `‚ÑπÔ∏è Brak zmian w rolach`;
            logger.info(`‚úÖ Zako≈Ñczono aktualizacjƒô r√≥l: ${result}`);
            
            return `${member.displayName}: ${result}`;
        } catch (error) {
            logger.error(`‚ùå B≈ÇƒÖd aktualizacji r√≥l: ${error.message}`);
            return `‚ùå B≈ÇƒÖd aktualizacji r√≥l: ${error.message}`;
        }
    }

    async sendWarningIfNeeded(guild, member, points) {
        try {
            if (points !== 3 && points !== 5) {
                return `‚ÑπÔ∏è Nie wysy≈Çam ostrze≈ºenia dla ${points} punkt√≥w (tylko dla 3 i 5)`;
            }
            
            const userRoleId = this.getUserRoleId(member);
            if (!userRoleId) {
                return '‚ùå Nie znaleziono roli u≈ºytkownika';
            }
            
            const warningChannelId = this.config.warningChannels[userRoleId];
            if (!warningChannelId) {
                return `‚ùå Brak kana≈Çu ostrze≈ºe≈Ñ dla roli ${userRoleId}`;
            }
            
            const warningChannel = guild.channels.cache.get(warningChannelId);
            if (!warningChannel) {
                return `‚ùå Nie znaleziono kana≈Çu ostrze≈ºe≈Ñ ${warningChannelId}`;
            }
            
            let message = '';
            if (points === 3) {
                message = `‚ö†Ô∏è **OSTRZE≈ªENIE** ‚ö†Ô∏è\n\n${member} otrzyma≈Ç rolƒô karnƒÖ za zebrane punkty karne!\n\n**Aktualne punkty:** ${points}\n**Przyczyna:** NiewystarczajƒÖca ilo≈õƒá walk z bossem\n\n*Punkty automatycznie znikajƒÖ co poniedzia≈Çek o p√≥≈Çnocy (1 na tydzie≈Ñ).*`;
            } else if (points === 5) {
                message = `üö® **ZAKAZ LOTERII** üö®\n\n${member} zosta≈Ç wykluczony z loterii Glory!\n\n**Aktualne punkty:** ${points}\n**Przyczyna:** Przekroczenie limitu 5 punkt√≥w kary\n\n*Punkty automatycznie znikajƒÖ co poniedzia≈Çek o p√≥≈Çnocy (1 na tydzie≈Ñ).*`;
            }
            
            if (message) {
                await warningChannel.send(message);
                return `‚úÖ Pomy≈õlnie wys≈Çano ostrze≈ºenie dla ${points} punkt√≥w na kana≈Ç ${warningChannel.name} (${warningChannel.id})`;
            }
            
            return '‚ùå Brak wiadomo≈õci do wys≈Çania';
        } catch (error) {
            return `‚ùå B≈ÇƒÖd wysy≈Çania ostrze≈ºenia: ${error.message}`;
        }
    }

    getUserRoleId(member) {
        for (const roleId of Object.values(this.config.targetRoles)) {
            if (member.roles.cache.has(roleId)) {
                return roleId;
            }
        }
        return null;
    }

    getUserWarningChannel(member) {
        for (const [roleId, channelId] of Object.entries(this.config.warningChannels)) {
            if (member.roles.cache.has(roleId)) {
                return channelId;
            }
        }
        return null;
    }

    async addPointsManually(guild, userId, points) {
        try {
            const member = await guild.members.fetch(userId);
            
            if (!member) {
                throw new Error('Nie znaleziono u≈ºytkownika');
            }
            
            const userPunishment = await this.db.addPunishmentPoints(guild.id, userId, points, 'Rƒôczne dodanie punkt√≥w');
            
            await this.updateUserRoles(member, userPunishment.points);
            await this.sendWarningIfNeeded(guild, member, userPunishment.points);
            
            return userPunishment;
        } catch (error) {
            logger.error('[PUNISHMENT] ‚ùå B≈ÇƒÖd rƒôcznego dodawania punkt√≥w:', error);
            throw error;
        }
    }

    async removePointsManually(guild, userId, points) {
        try {
            const member = await guild.members.fetch(userId);
            
            if (!member) {
                throw new Error('Nie znaleziono u≈ºytkownika');
            }
            
            const userPunishment = await this.db.removePunishmentPoints(guild.id, userId, points);
            
            if (userPunishment) {
                await this.updateUserRoles(member, userPunishment.points);
            } else {
                await this.updateUserRoles(member, 0);
            }
            
            return userPunishment;
        } catch (error) {
            logger.error('[PUNISHMENT] ‚ùå B≈ÇƒÖd rƒôcznego usuwania punkt√≥w:', error);
            throw error;
        }
    }

    async getRankingForRole(guild, roleId) {
        try {
            const guildPunishments = await this.db.getGuildPunishments(guild.id);
            const ranking = [];
            
            for (const [userId, userData] of Object.entries(guildPunishments)) {
                if (userData.points > 0) {
                    try {
                        const member = await guild.members.fetch(userId);
                        
                        if (member && member.roles.cache.has(roleId)) {
                            ranking.push({
                                member: member,
                                points: userData.points,
                                history: userData.history
                            });
                        }
                    } catch (error) {
                        logger.info(`[PUNISHMENT] ‚ö†Ô∏è Nie mo≈ºna znale≈∫ƒá u≈ºytkownika ${userId}`);
                    }
                }
            }
            
            ranking.sort((a, b) => b.points - a.points);
            
            return ranking;
        } catch (error) {
            logger.error('[PUNISHMENT] ‚ùå B≈ÇƒÖd pobierania rankingu:', error);
            throw error;
        }
    }

    async cleanupAllUsers(guild) {
        try {
            logger.info('\nüßπ ==================== TYGODNIOWE CZYSZCZENIE ====================');
            logger.info(`üè∞ Serwer: ${guild.name} (${guild.id})`);
            
            const guildPunishments = await this.db.getGuildPunishments(guild.id);
            
            let usersProcessed = 0;
            let rolesUpdated = 0;
            
            for (const [userId, userData] of Object.entries(guildPunishments)) {
                try {
                    const member = await guild.members.fetch(userId);
                    
                    if (member) {
                        logger.info(`üë§ Czyszczenie r√≥l dla: ${member.displayName}`);
                        const result = await this.updateUserRoles(member, 0);
                        
                        if (!result.includes('Brak zmian')) {
                            rolesUpdated++;
                        }
                        
                        usersProcessed++;
                    }
                } catch (error) {
                    logger.info(`‚ö†Ô∏è Nie mo≈ºna zaktualizowaƒá r√≥l dla u≈ºytkownika ${userId}: ${error.message}`);
                }
            }
            
            await this.db.cleanupWeeklyPoints();
            
            logger.info('\nüìä PODSUMOWANIE TYGODNIOWEGO CZYSZCZENIA:');
            logger.info(`üë• U≈ºytkownik√≥w przetworzonych: ${usersProcessed}`);
            logger.info(`üé≠ Role zaktualizowane: ${rolesUpdated}`);
            logger.info('‚úÖ Zako≈Ñczono tygodniowe czyszczenie kar');
        } catch (error) {
            logger.error('\nüí• ==================== B≈ÅƒÑD CZYSZCZENIA ====================');
            logger.error('‚ùå B≈ÇƒÖd czyszczenia kar:', error);
        }
    }
}

module.exports = PunishmentService;