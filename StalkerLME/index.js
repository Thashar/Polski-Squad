const { Client, GatewayIntentBits, Events } = require('discord.js');
const cron = require('node-cron');

const config = require('./config/config');
const { logWithTimestamp, delay } = require('./utils/helpers');
const { handleInteraction, registerSlashCommands } = require('./handlers/interactionHandlers');

const DatabaseService = require('./services/databaseService');
const OCRService = require('./services/ocrService');
const PunishmentService = require('./services/punishmentService');
const ReminderService = require('./services/reminderService');
const { createBotLogger } = require('../utils/consoleLogger');

const logger = createBotLogger('StalkerLME');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.MessageContent
    ]
});

// Inicjalizacja serwis√≥w
const databaseService = new DatabaseService(config);
const ocrService = new OCRService(config);
const punishmentService = new PunishmentService(config, databaseService);
const reminderService = new ReminderService(config);

// Obiekt zawierajƒÖcy wszystkie wsp√≥≈Çdzielone stany
const sharedState = {
    client,
    config,
    databaseService,
    ocrService,
    punishmentService,
    reminderService
};

client.once(Events.ClientReady, async () => {
    logger.info(`Bot zalogowany jako ${client.user.tag}`);
    logger.info(`Aktywny na ${client.guilds.cache.size} serwerach`);
    
    client.guilds.cache.forEach(guild => {
        logger.info(`- ${guild.name} (${guild.id})`);
    });
    
    // Inicjalizacja serwis√≥w
    await databaseService.initializeDatabase();
    await ocrService.initializeOCR();
    
    // Rejestracja komend slash
    await registerSlashCommands(client);
    
    // Uruchomienie zadania cron dla czyszczenia punkt√≥w (poniedzia≈Çek o p√≥≈Çnocy)
    cron.schedule('0 0 * * 1', async () => {
        logWithTimestamp('Rozpoczynam tygodniowe czyszczenie punkt√≥w karnych...', 'info');
        
        for (const guild of client.guilds.cache.values()) {
            try {
                await punishmentService.cleanupAllUsers(guild);
                logWithTimestamp(`Wyczyszczono punkty dla serwera: ${guild.name}`, 'info');
            } catch (error) {
                logWithTimestamp(`B≈ÇƒÖd czyszczenia punkt√≥w dla serwera ${guild.name}: ${error.message}`, 'error');
            }
        }
    }, {
        timezone: config.timezone
    });
    
    // Uruchomienie zadania cron dla czyszczenia plik√≥w tymczasowych (codziennie o 02:00)
    cron.schedule('0 2 * * *', async () => {
        logWithTimestamp('Rozpoczynam czyszczenie plik√≥w tymczasowych...', 'info');
        await ocrService.cleanupTempFiles();
    }, {
        timezone: config.timezone
    });
    
    // Usuniƒôto automatyczne od≈õwie≈ºanie cache'u cz≈Çonk√≥w - teraz odbywa siƒô przed u≈ºyciem komend
    
    logger.info('Bot Stalker LME jest gotowy do pracy!');
});

// Obs≈Çuga interakcji
client.on(Events.InteractionCreate, async (interaction) => {
    try {
        await handleInteraction(interaction, sharedState, config);
    } catch (error) {
        logWithTimestamp(`‚ùå B≈ÇƒÖd podczas obs≈Çugi interakcji: ${error.message}`, 'error');
        
        try {
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({ 
                    content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania komendy.', 
                    ephemeral: true 
                });
            } else if (interaction.deferred) {
                await interaction.editReply({ 
                    content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania komendy.' 
                });
            }
        } catch (replyError) {
            logWithTimestamp(`‚ùå Nie mo≈ºna odpowiedzieƒá na interakcjƒô (prawdopodobnie timeout): ${replyError.message}`, 'error');
        }
    }
});

// Obs≈Çuga b≈Çƒôd√≥w
client.on('error', error => {
    // Ignoruj b≈Çƒôdy WebSocket 520 - sƒÖ tymczasowe
    if (error.message && error.message.includes('520')) {
        logWithTimestamp('Tymczasowy b≈ÇƒÖd WebSocket 520 - automatyczne ponowne po≈ÇƒÖczenie', 'warn');
        return;
    }
    
    logWithTimestamp(`B≈ÇƒÖd klienta Discord: ${error.message}`, 'error');
});

client.on('warn', warning => {
    logWithTimestamp(`Ostrze≈ºenie Discord: ${warning}`, 'warn');
});

// Obs≈Çuga b≈Çƒôd√≥w proces√≥w
process.on('unhandledRejection', error => {
    // Ignoruj b≈Çƒôdy WebSocket 520 - sƒÖ tymczasowe
    if (error.message && error.message.includes('520')) {
        logWithTimestamp('Tymczasowy b≈ÇƒÖd WebSocket 520 - ignorujƒô', 'warn');
        return;
    }
    
    logWithTimestamp(`Nieobs≈Çu≈ºone odrzucenie Promise: ${error.message}`, 'error');
    logger.error(error);
});

process.on('uncaughtException', error => {
    logWithTimestamp(`Nieobs≈Çu≈ºony wyjƒÖtek: ${error.message}`, 'error');
    logger.error(error);
    process.exit(1);
});

// Graceful shutdown
process.on('SIGINT', async () => {
    logWithTimestamp('Otrzymano sygna≈Ç SIGINT, zamykam bota...', 'info');
    
    try {
        await client.destroy();
        logWithTimestamp('Bot zosta≈Ç pomy≈õlnie zamkniƒôty', 'info');
        process.exit(0);
    } catch (error) {
        logWithTimestamp(`B≈ÇƒÖd podczas zamykania bota: ${error.message}`, 'error');
        process.exit(1);
    }
});

process.on('SIGTERM', async () => {
    logWithTimestamp('Otrzymano sygna≈Ç SIGTERM, zamykam bota...', 'info');
    
    try {
        await client.destroy();
        logWithTimestamp('Bot zosta≈Ç pomy≈õlnie zamkniƒôty', 'info');
        process.exit(0);
    } catch (error) {
        logWithTimestamp(`B≈ÇƒÖd podczas zamykania bota: ${error.message}`, 'error');
        process.exit(1);
    }
});

// Funkcja do od≈õwie≈ºania cache'u cz≈Çonk√≥w
async function refreshMemberCache() {
    try {
        logger.info('Od≈õwie≈ºanie cache\'u cz≈Çonk√≥w');
        
        let totalMembers = 0;
        let guildsProcessed = 0;
        
        for (const guild of client.guilds.cache.values()) {
            try {
                logger.info(`üè∞ Przetwarzanie serwera: ${guild.name} (${guild.id})`);
                
                // Od≈õwie≈º cache dla wszystkich cz≈Çonk√≥w serwera
                const members = await guild.members.fetch();
                
                logger.info(`üë• Za≈Çadowano ${members.size} cz≈Çonk√≥w dla serwera ${guild.name}`);
                totalMembers += members.size;
                guildsProcessed++;
                
                // Sprawd≈∫ ile cz≈Çonk√≥w ma role target
                let targetRoleMembers = 0;
                for (const roleId of Object.values(config.targetRoles)) {
                    const role = guild.roles.cache.get(roleId);
                    if (role) {
                        targetRoleMembers += role.members.size;
                        logger.info(`üé≠ Rola ${role.name}: ${role.members.size} cz≈Çonk√≥w`);
                    }
                }
                
                logger.info(`‚úÖ Serwer ${guild.name}: ${members.size} cz≈Çonk√≥w, ${targetRoleMembers} z rolami target`);
                
            } catch (error) {
                logger.error(`‚ùå B≈ÇƒÖd od≈õwie≈ºania cache'u dla serwera ${guild.name}: ${error.message}`);
            }
        }
        
        logger.info('Podsumowanie od≈õwie≈ºania cache\'u:');
        logger.info(`üè∞ Serwer√≥w przetworzonych: ${guildsProcessed}`);
        logger.info(`üë• ≈ÅƒÖczna liczba cz≈Çonk√≥w: ${totalMembers}`);
        logger.info('‚úÖ Od≈õwie≈ºanie cache\'u zako≈Ñczone pomy≈õlnie');
        
    } catch (error) {
        logger.error('B≈ÇƒÖd od≈õwie≈ºania cache\'u');
        logger.error('‚ùå B≈ÇƒÖd od≈õwie≈ºania cache\'u cz≈Çonk√≥w:', error);
    }
}

// Funkcje do zarzƒÖdzania botem
async function startBot() {
    try {
        if (!config.token) {
            throw new Error('STALKER_LME_TOKEN nie jest ustawiony w zmiennych ≈õrodowiskowych');
        }
        
        await client.login(config.token);
        return client;
    } catch (error) {
        logWithTimestamp(`B≈ÇƒÖd uruchamiania bota: ${error.message}`, 'error');
        throw error;
    }
}

async function stopBot() {
    try {
        logWithTimestamp('Zatrzymywanie bota Stalker LME...', 'info');
        await client.destroy();
        logWithTimestamp('Bot zosta≈Ç zatrzymany', 'info');
    } catch (error) {
        logWithTimestamp(`B≈ÇƒÖd zatrzymywania bota: ${error.message}`, 'error');
        throw error;
    }
}

// Eksportuj funkcje do zarzƒÖdzania botem
module.exports = {
    client,
    startBot,
    stopBot,
    sharedState,
    refreshMemberCache,
    
    // Dla kompatybilno≈õci z g≈Ç√≥wnym launcherem
    start: startBot,
    stop: stopBot
};